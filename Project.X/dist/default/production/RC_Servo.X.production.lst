

Microchip Technology PIC18 LITE Macro Assembler V1.33 build 59893 
                                                                                               Mon Aug 15 12:31:04 2016

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	18F1330
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     7                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    23                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    24                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    25  0000                     
    26                           	psect	idataCOMRAM
    27  000594                     __pidataCOMRAM:
    28                           	opt stack 0
    29                           
    30                           ;initializer for _dutyCycle
    31  000594  0120               	dw	288
    32  000596  0120               	dw	288
    33  000598  0120               	dw	288
    34  00059A  0120               	dw	288
    35  00059C  0120               	dw	288
    36  00059E  0120               	dw	288
    37                           
    38                           ;initializer for _LEDcounter
    39  0005A0  0A                 	db	10
    40                           
    41                           	psect	mediumconst
    42  001DC8                     __pmediumconst:
    43                           	opt stack 0
    44  001DC8  00                 	db	0
    45  001DC9                     _crc_tab16:
    46                           	opt stack 0
    47  001DC9  0000               	dw	0
    48  001DCB  C0C1               	dw	49345
    49  001DCD  C181               	dw	49537
    50  001DCF  0140               	dw	320
    51  001DD1  C301               	dw	49921
    52  001DD3  03C0               	dw	960
    53  001DD5  0280               	dw	640
    54  001DD7  C241               	dw	49729
    55  001DD9  C601               	dw	50689
    56  001DDB  06C0               	dw	1728
    57  001DDD  0780               	dw	1920
    58  001DDF  C741               	dw	51009
    59  001DE1  0500               	dw	1280
    60  001DE3  C5C1               	dw	50625
    61  001DE5  C481               	dw	50305
    62  001DE7  0440               	dw	1088
    63  001DE9  CC01               	dw	52225
    64  001DEB  0CC0               	dw	3264
    65  001DED  0D80               	dw	3456
    66  001DEF  CD41               	dw	52545
    67  001DF1  0F00               	dw	3840
    68  001DF3  CFC1               	dw	53185
    69  001DF5  CE81               	dw	52865
    70  001DF7  0E40               	dw	3648
    71  001DF9  0A00               	dw	2560
    72  001DFB  CAC1               	dw	51905
    73  001DFD  CB81               	dw	52097
    74  001DFF  0B40               	dw	2880
    75  001E01  C901               	dw	51457
    76  001E03  09C0               	dw	2496
    77  001E05  0880               	dw	2176
    78  001E07  C841               	dw	51265
    79  001E09  D801               	dw	55297
    80  001E0B  18C0               	dw	6336
    81  001E0D  1980               	dw	6528
    82  001E0F  D941               	dw	55617
    83  001E11  1B00               	dw	6912
    84  001E13  DBC1               	dw	56257
    85  001E15  DA81               	dw	55937
    86  001E17  1A40               	dw	6720
    87  001E19  1E00               	dw	7680
    88  001E1B  DEC1               	dw	57025
    89  001E1D  DF81               	dw	57217
    90  001E1F  1F40               	dw	8000
    91  001E21  DD01               	dw	56577
    92  001E23  1DC0               	dw	7616
    93  001E25  1C80               	dw	7296
    94  001E27  DC41               	dw	56385
    95  001E29  1400               	dw	5120
    96  001E2B  D4C1               	dw	54465
    97  001E2D  D581               	dw	54657
    98  001E2F  1540               	dw	5440
    99  001E31  D701               	dw	55041
   100  001E33  17C0               	dw	6080
   101  001E35  1680               	dw	5760
   102  001E37  D641               	dw	54849
   103  001E39  D201               	dw	53761
   104  001E3B  12C0               	dw	4800
   105  001E3D  1380               	dw	4992
   106  001E3F  D341               	dw	54081
   107  001E41  1100               	dw	4352
   108  001E43  D1C1               	dw	53697
   109  001E45  D081               	dw	53377
   110  001E47  1040               	dw	4160
   111  001E49  F001               	dw	61441
   112  001E4B  30C0               	dw	12480
   113  001E4D  3180               	dw	12672
   114  001E4F  F141               	dw	61761
   115  001E51  3300               	dw	13056
   116  001E53  F3C1               	dw	62401
   117  001E55  F281               	dw	62081
   118  001E57  3240               	dw	12864
   119  001E59  3600               	dw	13824
   120  001E5B  F6C1               	dw	63169
   121  001E5D  F781               	dw	63361
   122  001E5F  3740               	dw	14144
   123  001E61  F501               	dw	62721
   124  001E63  35C0               	dw	13760
   125  001E65  3480               	dw	13440
   126  001E67  F441               	dw	62529
   127  001E69  3C00               	dw	15360
   128  001E6B  FCC1               	dw	64705
   129  001E6D  FD81               	dw	64897
   130  001E6F  3D40               	dw	15680
   131  001E71  FF01               	dw	65281
   132  001E73  3FC0               	dw	16320
   133  001E75  3E80               	dw	16000
   134  001E77  FE41               	dw	65089
   135  001E79  FA01               	dw	64001
   136  001E7B  3AC0               	dw	15040
   137  001E7D  3B80               	dw	15232
   138  001E7F  FB41               	dw	64321
   139  001E81  3900               	dw	14592
   140  001E83  F9C1               	dw	63937
   141  001E85  F881               	dw	63617
   142  001E87  3840               	dw	14400
   143  001E89  2800               	dw	10240
   144  001E8B  E8C1               	dw	59585
   145  001E8D  E981               	dw	59777
   146  001E8F  2940               	dw	10560
   147  001E91  EB01               	dw	60161
   148  001E93  2BC0               	dw	11200
   149  001E95  2A80               	dw	10880
   150  001E97  EA41               	dw	59969
   151  001E99  EE01               	dw	60929
   152  001E9B  2EC0               	dw	11968
   153  001E9D  2F80               	dw	12160
   154  001E9F  EF41               	dw	61249
   155  001EA1  2D00               	dw	11520
   156  001EA3  EDC1               	dw	60865
   157  001EA5  EC81               	dw	60545
   158  001EA7  2C40               	dw	11328
   159  001EA9  E401               	dw	58369
   160  001EAB  24C0               	dw	9408
   161  001EAD  2580               	dw	9600
   162  001EAF  E541               	dw	58689
   163  001EB1  2700               	dw	9984
   164  001EB3  E7C1               	dw	59329
   165  001EB5  E681               	dw	59009
   166  001EB7  2640               	dw	9792
   167  001EB9  2200               	dw	8704
   168  001EBB  E2C1               	dw	58049
   169  001EBD  E381               	dw	58241
   170  001EBF  2340               	dw	9024
   171  001EC1  E101               	dw	57601
   172  001EC3  21C0               	dw	8640
   173  001EC5  2080               	dw	8320
   174  001EC7  E041               	dw	57409
   175  001EC9  A001               	dw	40961
   176  001ECB  60C0               	dw	24768
   177  001ECD  6180               	dw	24960
   178  001ECF  A141               	dw	41281
   179  001ED1  6300               	dw	25344
   180  001ED3  A3C1               	dw	41921
   181  001ED5  A281               	dw	41601
   182  001ED7  6240               	dw	25152
   183  001ED9  6600               	dw	26112
   184  001EDB  A6C1               	dw	42689
   185  001EDD  A781               	dw	42881
   186  001EDF  6740               	dw	26432
   187  001EE1  A501               	dw	42241
   188  001EE3  65C0               	dw	26048
   189  001EE5  6480               	dw	25728
   190  001EE7  A441               	dw	42049
   191  001EE9  6C00               	dw	27648
   192  001EEB  ACC1               	dw	44225
   193  001EED  AD81               	dw	44417
   194  001EEF  6D40               	dw	27968
   195  001EF1  AF01               	dw	44801
   196  001EF3  6FC0               	dw	28608
   197  001EF5  6E80               	dw	28288
   198  001EF7  AE41               	dw	44609
   199  001EF9  AA01               	dw	43521
   200  001EFB  6AC0               	dw	27328
   201  001EFD  6B80               	dw	27520
   202  001EFF  AB41               	dw	43841
   203  001F01  6900               	dw	26880
   204  001F03  A9C1               	dw	43457
   205  001F05  A881               	dw	43137
   206  001F07  6840               	dw	26688
   207  001F09  7800               	dw	30720
   208  001F0B  B8C1               	dw	47297
   209  001F0D  B981               	dw	47489
   210  001F0F  7940               	dw	31040
   211  001F11  BB01               	dw	47873
   212  001F13  7BC0               	dw	31680
   213  001F15  7A80               	dw	31360
   214  001F17  BA41               	dw	47681
   215  001F19  BE01               	dw	48641
   216  001F1B  7EC0               	dw	32448
   217  001F1D  7F80               	dw	32640
   218  001F1F  BF41               	dw	48961
   219  001F21  7D00               	dw	32000
   220  001F23  BDC1               	dw	48577
   221  001F25  BC81               	dw	48257
   222  001F27  7C40               	dw	31808
   223  001F29  B401               	dw	46081
   224  001F2B  74C0               	dw	29888
   225  001F2D  7580               	dw	30080
   226  001F2F  B541               	dw	46401
   227  001F31  7700               	dw	30464
   228  001F33  B7C1               	dw	47041
   229  001F35  B681               	dw	46721
   230  001F37  7640               	dw	30272
   231  001F39  7200               	dw	29184
   232  001F3B  B2C1               	dw	45761
   233  001F3D  B381               	dw	45953
   234  001F3F  7340               	dw	29504
   235  001F41  B101               	dw	45313
   236  001F43  71C0               	dw	29120
   237  001F45  7080               	dw	28800
   238  001F47  B041               	dw	45121
   239  001F49  5000               	dw	20480
   240  001F4B  90C1               	dw	37057
   241  001F4D  9181               	dw	37249
   242  001F4F  5140               	dw	20800
   243  001F51  9301               	dw	37633
   244  001F53  53C0               	dw	21440
   245  001F55  5280               	dw	21120
   246  001F57  9241               	dw	37441
   247  001F59  9601               	dw	38401
   248  001F5B  56C0               	dw	22208
   249  001F5D  5780               	dw	22400
   250  001F5F  9741               	dw	38721
   251  001F61  5500               	dw	21760
   252  001F63  95C1               	dw	38337
   253  001F65  9481               	dw	38017
   254  001F67  5440               	dw	21568
   255  001F69  9C01               	dw	39937
   256  001F6B  5CC0               	dw	23744
   257  001F6D  5D80               	dw	23936
   258  001F6F  9D41               	dw	40257
   259  001F71  5F00               	dw	24320
   260  001F73  9FC1               	dw	40897
   261  001F75  9E81               	dw	40577
   262  001F77  5E40               	dw	24128
   263  001F79  5A00               	dw	23040
   264  001F7B  9AC1               	dw	39617
   265  001F7D  9B81               	dw	39809
   266  001F7F  5B40               	dw	23360
   267  001F81  9901               	dw	39169
   268  001F83  59C0               	dw	22976
   269  001F85  5880               	dw	22656
   270  001F87  9841               	dw	38977
   271  001F89  8801               	dw	34817
   272  001F8B  48C0               	dw	18624
   273  001F8D  4980               	dw	18816
   274  001F8F  8941               	dw	35137
   275  001F91  4B00               	dw	19200
   276  001F93  8BC1               	dw	35777
   277  001F95  8A81               	dw	35457
   278  001F97  4A40               	dw	19008
   279  001F99  4E00               	dw	19968
   280  001F9B  8EC1               	dw	36545
   281  001F9D  8F81               	dw	36737
   282  001F9F  4F40               	dw	20288
   283  001FA1  8D01               	dw	36097
   284  001FA3  4DC0               	dw	19904
   285  001FA5  4C80               	dw	19584
   286  001FA7  8C41               	dw	35905
   287  001FA9  4400               	dw	17408
   288  001FAB  84C1               	dw	33985
   289  001FAD  8581               	dw	34177
   290  001FAF  4540               	dw	17728
   291  001FB1  8701               	dw	34561
   292  001FB3  47C0               	dw	18368
   293  001FB5  4680               	dw	18048
   294  001FB7  8641               	dw	34369
   295  001FB9  8201               	dw	33281
   296  001FBB  42C0               	dw	17088
   297  001FBD  4380               	dw	17280
   298  001FBF  8341               	dw	33601
   299  001FC1  4100               	dw	16640
   300  001FC3  81C1               	dw	33217
   301  001FC5  8081               	dw	32897
   302  001FC7  4040               	dw	16448
   303  001FC9                     __end_of_crc_tab16:
   304                           	opt stack 0
   305  001FC9                     _dpowers:
   306                           	opt stack 0
   307  001FC9  0001               	dw	1
   308  001FCB  000A               	dw	10
   309  001FCD  0064               	dw	100
   310  001FCF  03E8               	dw	1000
   311  001FD1  2710               	dw	10000
   312  001FD3                     __end_of_dpowers:
   313                           	opt stack 0
   314  0000                     _ADCON0	set	4034
   315  0000                     _ADCON1	set	4033
   316  0000                     _ADCON2	set	4032
   317  0000                     _ADCON2bits	set	4032
   318  0000                     _ADRESH	set	4036
   319  0000                     _FLTCONFIG	set	3979
   320  0000                     _INTCON	set	4082
   321  0000                     _OVDCOND	set	3971
   322  0000                     _OVDCONS	set	3970
   323  0000                     _PDC0H	set	3984
   324  0000                     _PDC0L	set	3985
   325  0000                     _PDC1H	set	3982
   326  0000                     _PDC1L	set	3983
   327  0000                     _PDC2H	set	3980
   328  0000                     _PDC2L	set	3981
   329  0000                     _PIE1	set	3997
   330  0000                     _PIE3	set	4003
   331  0000                     _PORTAbits	set	3968
   332  0000                     _PTCON0	set	3994
   333  0000                     _PTCON1	set	3993
   334  0000                     _PTPERH	set	3989
   335  0000                     _PTPERL	set	3990
   336  0000                     _PWMCON0	set	3974
   337  0000                     _PWMCON1	set	3973
   338  0000                     _RCREG	set	4014
   339  0000                     _RCSTAbits	set	4011
   340  0000                     _SPBRG	set	4015
   341  0000                     _T0CON	set	4053
   342  0000                     _T1CON	set	4045
   343  0000                     _TRISA	set	3986
   344  0000                     _TRISB	set	3987
   345  0000                     _TXREG	set	4013
   346  0000                     _BRGH	set	32098
   347  0000                     _CREN	set	32092
   348  0000                     _GIE	set	32663
   349  0000                     _GODONE	set	32273
   350  0000                     _PEIE	set	32662
   351  0000                     _PMOD0	set	31792
   352  0000                     _PMOD1	set	31793
   353  0000                     _PMOD2	set	31794
   354  0000                     _PSA	set	32427
   355  0000                     _PTCKPS0	set	31954
   356  0000                     _PTCKPS1	set	31955
   357  0000                     _PTEN	set	31951
   358  0000                     _PTMOD0	set	31952
   359  0000                     _PTMOD1	set	31953
   360  0000                     _PWMEN0	set	31796
   361  0000                     _PWMEN1	set	31797
   362  0000                     _PWMEN2	set	31798
   363  0000                     _RBPU	set	32655
   364  0000                     _RCIE	set	31981
   365  0000                     _RCIF	set	31989
   366  0000                     _RX9	set	32094
   367  0000                     _SPEN	set	32095
   368  0000                     _SREN	set	32093
   369  0000                     _SYNC	set	32100
   370  0000                     _T016BIT	set	32430
   371  0000                     _T0CS	set	32429
   372  0000                     _T0PS0	set	32424
   373  0000                     _T0PS1	set	32425
   374  0000                     _T0PS2	set	32426
   375  0000                     _T0SE	set	32428
   376  0000                     _T1CKPS0	set	32364
   377  0000                     _T1CKPS1	set	32365
   378  0000                     _T1RD16	set	32367
   379  0000                     _TMR0IE	set	32661
   380  0000                     _TMR0IF	set	32658
   381  0000                     _TMR0ON	set	32431
   382  0000                     _TMR1CS	set	32361
   383  0000                     _TMR1IE	set	31976
   384  0000                     _TMR1ON	set	32360
   385  0000                     _TX9	set	32102
   386  0000                     _TXEN	set	32101
   387  0000                     _TXIE	set	31980
   388  0000                     _TXIF	set	31988
   389  001FD3                     __stringdata:
   390                           	opt stack 0
   391  001FD3                     STR_2:
   392  001FD3  54                 	db	84	;'T'
   393  001FD4  65                 	db	101	;'e'
   394  001FD5  73                 	db	115	;'s'
   395  001FD6  74                 	db	116	;'t'
   396  001FD7  69                 	db	105	;'i'
   397  001FD8  6E                 	db	110	;'n'
   398  001FD9  67                 	db	103	;'g'
   399  001FDA  20                 	db	32
   400  001FDB  73                 	db	115	;'s'
   401  001FDC  65                 	db	101	;'e'
   402  001FDD  72                 	db	114	;'r'
   403  001FDE  76                 	db	118	;'v'
   404  001FDF  6F                 	db	111	;'o'
   405  001FE0  20                 	db	32
   406  001FE1  63                 	db	99	;'c'
   407  001FE2  6F                 	db	111	;'o'
   408  001FE3  6D                 	db	109	;'m'
   409  001FE4  6D                 	db	109	;'m'
   410  001FE5  61                 	db	97	;'a'
   411  001FE6  6E                 	db	110	;'n'
   412  001FE7  64                 	db	100	;'d'
   413  001FE8  73                 	db	115	;'s'
   414  001FE9  0D                 	db	13
   415  001FEA  00                 	db	0
   416  001FEB  0D                 	db	13
   417  001FEC  55                 	db	85	;'U'
   418  001FED  70                 	db	112	;'p'
   419  001FEE  64                 	db	100	;'d'
   420  001FEF  61                 	db	97	;'a'
   421  001FF0  74                 	db	116	;'t'
   422  001FF1  65                 	db	101	;'e'
   423  001FF2  64                 	db	100	;'d'
   424  001FF3  3A                 	db	58	;':'
   425  001FF4  20                 	db	32
   426  001FF5  25                 	db	37
   427  001FF6  64                 	db	100	;'d'
   428  001FF7  20                 	db	32
   429  001FF8  73                 	db	115	;'s'
   430  001FF9  65                 	db	101	;'e'
   431  001FFA  72                 	db	114	;'r'
   432  001FFB  76                 	db	118	;'v'
   433  001FFC  6F                 	db	111	;'o'
   434  001FFD  73                 	db	115	;'s'
   435  001FFE  00                 	db	0
   436  001FFF                     __end_of__stringdata:
   437                           	opt stack 0
   438                           
   439                           ; #config settings
   440  001FFF  00                 	db	0	; dummy byte at the end
   441  0000                     
   442                           	psect	nvCOMRAM
   443  000057                     __pnvCOMRAM:
   444                           	opt stack 0
   445  000057                     _LEDflag:
   446                           	opt stack 0
   447  000057                     	ds	1
   448                           
   449                           	psect	cinit
   450  0004D4                     __pcinit:
   451                           	opt stack 0
   452  0004D4                     start_initialization:
   453                           	opt stack 0
   454  0004D4                     __initialization:
   455                           	opt stack 0
   456                           
   457                           ; Clear objects allocated to BANK0 (128 bytes)
   458  0004D4  EE00  F080         	lfsr	0,__pbssBANK0
   459  0004D8  0E80               	movlw	128
   460  0004DA                     clear_0:
   461  0004DA  6AEE               	clrf	postinc0,c
   462  0004DC  06E8               	decf	wreg,f,c
   463  0004DE  E1FD               	bnz	clear_0
   464                           
   465                           ; Clear objects allocated to COMRAM (23 bytes)
   466  0004E0  EE00  F033         	lfsr	0,__pbssCOMRAM
   467  0004E4  0E17               	movlw	23
   468  0004E6                     clear_1:
   469  0004E6  6AEE               	clrf	postinc0,c
   470  0004E8  06E8               	decf	wreg,f,c
   471  0004EA  E1FD               	bnz	clear_1
   472                           
   473                           ; Initialize objects allocated to COMRAM (13 bytes)
   474                           ; load TBLPTR registers with __pidataCOMRAM
   475  0004EC  0E94               	movlw	low __pidataCOMRAM
   476  0004EE  6EF6               	movwf	tblptrl,c
   477  0004F0  0E05               	movlw	high __pidataCOMRAM
   478  0004F2  6EF7               	movwf	tblptrh,c
   479  0004F4  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   480  0004F6  6EF8               	movwf	tblptru,c
   481  0004F8  EE00  F04A         	lfsr	0,__pdataCOMRAM
   482  0004FC  EE10 F00D          	lfsr	1,13
   483  000500                     copy_data0:
   484  000500  0009               	tblrd		*+
   485  000502  CFF5 FFEE          	movff	tablat,postinc0
   486  000506  50E5               	movf	postdec1,w,c
   487  000508  50E1               	movf	fsr1l,w,c
   488  00050A  E1FA               	bnz	copy_data0
   489  00050C                     end_of_initialization:
   490                           	opt stack 0
   491  00050C                     __end_of__initialization:
   492                           	opt stack 0
   493  00050C  0E00               	movlw	low (__Lmediumconst shr (0+16))
   494  00050E  6EF8               	movwf	tblptru,c
   495  000510  0100               	movlb	0
   496  000512  EF7F  F000         	goto	_main	;jump to C main() function
   497                           tblptru	equ	0xFF8
   498                           tblptrh	equ	0xFF7
   499                           tblptrl	equ	0xFF6
   500                           tablat	equ	0xFF5
   501                           postinc0	equ	0xFEE
   502                           wreg	equ	0xFE8
   503                           postdec1	equ	0xFE5
   504                           fsr1l	equ	0xFE1
   505                           
   506                           	psect	bssCOMRAM
   507  000033                     __pbssCOMRAM:
   508                           	opt stack 0
   509  000033                     _DUTYbuffer:
   510                           	opt stack 0
   511  000033                     	ds	6
   512  000039                     _convert:
   513                           	opt stack 0
   514  000039                     	ds	2
   515  00003B                     _inLength:
   516                           	opt stack 0
   517  00003B                     	ds	2
   518  00003D                     _j:
   519                           	opt stack 0
   520  00003D                     	ds	2
   521  00003F                     _boardNumber:
   522                           	opt stack 0
   523  00003F                     	ds	1
   524  000040                     _ch:
   525                           	opt stack 0
   526  000040                     	ds	1
   527  000041                     _dummy:
   528                           	opt stack 0
   529  000041                     	ds	1
   530  000042                     _endFlag:
   531                           	opt stack 0
   532  000042                     	ds	1
   533  000043                     _escapeFlag:
   534                           	opt stack 0
   535  000043                     	ds	1
   536  000044                     _numServosUpdated:
   537                           	opt stack 0
   538  000044                     	ds	1
   539  000045                     _startFlag:
   540                           	opt stack 0
   541  000045                     	ds	1
   542  000046                     isr@buffIndex:
   543                           	opt stack 0
   544  000046                     	ds	1
   545  000047                     isr@escapeFlag:
   546                           	opt stack 0
   547  000047                     	ds	1
   548  000048                     _integer:
   549                           	opt stack 0
   550  000048                     	ds	2
   551                           tblptru	equ	0xFF8
   552                           tblptrh	equ	0xFF7
   553                           tblptrl	equ	0xFF6
   554                           tablat	equ	0xFF5
   555                           postinc0	equ	0xFEE
   556                           wreg	equ	0xFE8
   557                           postdec1	equ	0xFE5
   558                           fsr1l	equ	0xFE1
   559                           
   560                           	psect	dataCOMRAM
   561  00004A                     __pdataCOMRAM:
   562                           	opt stack 0
   563  00004A                     _dutyCycle:
   564                           	opt stack 0
   565  00004A                     	ds	12
   566  000056                     _LEDcounter:
   567                           	opt stack 0
   568  000056                     	ds	1
   569                           tblptru	equ	0xFF8
   570                           tblptrh	equ	0xFF7
   571                           tblptrl	equ	0xFF6
   572                           tablat	equ	0xFF5
   573                           postinc0	equ	0xFEE
   574                           wreg	equ	0xFE8
   575                           postdec1	equ	0xFE5
   576                           fsr1l	equ	0xFE1
   577                           
   578                           	psect	bssBANK0
   579  000080                     __pbssBANK0:
   580                           	opt stack 0
   581  000080                     _XBEERxBuffer:
   582                           	opt stack 0
   583  000080                     	ds	64
   584  0000C0                     _servoBuffer:
   585                           	opt stack 0
   586  0000C0                     	ds	64
   587                           tblptru	equ	0xFF8
   588                           tblptrh	equ	0xFF7
   589                           tblptrl	equ	0xFF6
   590                           tablat	equ	0xFF5
   591                           postinc0	equ	0xFEE
   592                           wreg	equ	0xFE8
   593                           postdec1	equ	0xFE5
   594                           fsr1l	equ	0xFE1
   595                           
   596                           	psect	cstackCOMRAM
   597  000001                     __pcstackCOMRAM:
   598                           	opt stack 0
   599  000001                     ??_isr:
   600                           
   601                           ; 0 bytes @ 0x0
   602  000001                     	ds	14
   603  00000F                     isr@BoardID:
   604                           	opt stack 0
   605                           
   606                           ; 1 bytes @ 0xE
   607  00000F                     	ds	1
   608  000010                     isr@ch:
   609                           	opt stack 0
   610                           
   611                           ; 1 bytes @ 0xF
   612  000010                     	ds	1
   613  000011                     ??_ADsetChannel:
   614  000011                     ?_convertDutyCycle:
   615                           	opt stack 0
   616  000011                     ?___lwdiv:
   617                           	opt stack 0
   618  000011                     putch@ch:
   619                           	opt stack 0
   620  000011                     DelayMs@i:
   621                           	opt stack 0
   622  000011                     ___lwdiv@dividend:
   623                           	opt stack 0
   624                           
   625                           ; 2 bytes @ 0x10
   626  000011                     	ds	1
   627  000012                     ADsetChannel@channel:
   628                           	opt stack 0
   629                           
   630                           ; 1 bytes @ 0x11
   631  000012                     	ds	1
   632  000013                     convertDutyCycle@servoPosition:
   633                           	opt stack 0
   634  000013                     DelayMs@j:
   635                           	opt stack 0
   636  000013                     ___lwdiv@divisor:
   637                           	opt stack 0
   638                           
   639                           ; 2 bytes @ 0x12
   640  000013                     	ds	1
   641  000014                     convertDutyCycle@temp:
   642                           	opt stack 0
   643                           
   644                           ; 2 bytes @ 0x13
   645  000014                     	ds	1
   646  000015                     DelayMs@k:
   647                           	opt stack 0
   648  000015                     ___lwdiv@quotient:
   649                           	opt stack 0
   650                           
   651                           ; 2 bytes @ 0x14
   652  000015                     	ds	2
   653  000017                     ___lwdiv@counter:
   654                           	opt stack 0
   655                           
   656                           ; 1 bytes @ 0x16
   657  000017                     	ds	1
   658  000018                     ?___lwmod:
   659                           	opt stack 0
   660  000018                     ___lwmod@dividend:
   661                           	opt stack 0
   662                           
   663                           ; 2 bytes @ 0x17
   664  000018                     	ds	2
   665  00001A                     ___lwmod@divisor:
   666                           	opt stack 0
   667                           
   668                           ; 2 bytes @ 0x19
   669  00001A                     	ds	2
   670  00001C                     ___lwmod@counter:
   671                           	opt stack 0
   672                           
   673                           ; 1 bytes @ 0x1B
   674  00001C                     	ds	1
   675  00001D                     ?_printf:
   676                           	opt stack 0
   677  00001D                     printf@f:
   678                           	opt stack 0
   679                           
   680                           ; 2 bytes @ 0x1C
   681  00001D                     	ds	4
   682  000021                     ??_printf:
   683                           
   684                           ; 0 bytes @ 0x20
   685  000021                     	ds	2
   686  000023                     printf@ap:
   687                           	opt stack 0
   688                           
   689                           ; 2 bytes @ 0x22
   690  000023                     	ds	2
   691  000025                     printf@flag:
   692                           	opt stack 0
   693                           
   694                           ; 1 bytes @ 0x24
   695  000025                     	ds	1
   696  000026                     printf@prec:
   697                           	opt stack 0
   698                           
   699                           ; 1 bytes @ 0x25
   700  000026                     	ds	1
   701  000027                     printf@_val:
   702                           	opt stack 0
   703                           
   704                           ; 5 bytes @ 0x26
   705  000027                     	ds	5
   706  00002C                     printf@c:
   707                           	opt stack 0
   708                           
   709                           ; 1 bytes @ 0x2B
   710  00002C                     	ds	1
   711  00002D                     main@potValue:
   712                           	opt stack 0
   713                           
   714                           ; 2 bytes @ 0x2C
   715  00002D                     	ds	2
   716  00002F                     main@Timer0Counter:
   717                           	opt stack 0
   718                           
   719                           ; 2 bytes @ 0x2E
   720  00002F                     	ds	2
   721  000031                     main@stroke:
   722                           	opt stack 0
   723                           
   724                           ; 1 bytes @ 0x30
   725  000031                     	ds	1
   726  000032                     main@angle:
   727                           	opt stack 0
   728                           
   729                           ; 1 bytes @ 0x31
   730  000032                     	ds	1
   731                           tblptru	equ	0xFF8
   732                           tblptrh	equ	0xFF7
   733                           tblptrl	equ	0xFF6
   734                           tablat	equ	0xFF5
   735                           postinc0	equ	0xFEE
   736                           wreg	equ	0xFE8
   737                           postdec1	equ	0xFE5
   738                           fsr1l	equ	0xFE1
   739                           
   740 ;;
   741 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   742 ;;
   743 ;; *************** function _main *****************
   744 ;; Defined at:
   745 ;;		line 158 in file "../main.c"
   746 ;; Parameters:    Size  Location     Type
   747 ;;		None
   748 ;; Auto vars:     Size  Location     Type
   749 ;;  Timer0Counte    2   46[COMRAM] unsigned short 
   750 ;;  potValue        2   44[COMRAM] unsigned short 
   751 ;;  angle           1   49[COMRAM] unsigned char 
   752 ;;  stroke          1   48[COMRAM] unsigned char 
   753 ;; Return value:  Size  Location     Type
   754 ;;		None               void
   755 ;; Registers used:
   756 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   757 ;; Tracked objects:
   758 ;;		On entry : 0/0
   759 ;;		On exit  : 0/0
   760 ;;		Unchanged: 0/0
   761 ;; Data sizes:     COMRAM   BANK0
   762 ;;      Params:         0       0
   763 ;;      Locals:         6       0
   764 ;;      Temps:          0       0
   765 ;;      Totals:         6       0
   766 ;;Total ram usage:        6 bytes
   767 ;; Hardware stack levels required when called:    3
   768 ;; This function calls:
   769 ;;		_ADsetChannel
   770 ;;		_DelayMs
   771 ;;		_convertDutyCycle
   772 ;;		_initializePorts
   773 ;;		_printf
   774 ;; This function is called by:
   775 ;;		Startup code after reset
   776 ;; This function uses a non-reentrant model
   777 ;;
   778                           
   779                           	psect	text0
   780  0000FE                     __ptext0:
   781                           	opt stack 0
   782  0000FE                     _main:
   783                           	opt stack 28
   784                           
   785                           ;main.c: 159: LEDflag = !0;
   786                           
   787                           ;incstack = 0
   788  0000FE  0E01               	movlw	1
   789  000100  6E57               	movwf	_LEDflag,c
   790                           
   791                           ;main.c: 160: unsigned short potValue = 255;
   792  000102  0E00               	movlw	0
   793  000104  6E2E               	movwf	main@potValue+1,c
   794  000106  682D               	setf	main@potValue,c
   795                           
   796                           ;main.c: 161: unsigned char stroke = 0;
   797  000108  0E00               	movlw	0
   798  00010A  6E31               	movwf	main@stroke,c
   799                           
   800                           ;main.c: 162: unsigned short Timer0Counter = 0;
   801  00010C  0E00               	movlw	0
   802  00010E  6E30               	movwf	main@Timer0Counter+1,c
   803  000110  0E00               	movlw	0
   804  000112  6E2F               	movwf	main@Timer0Counter,c
   805                           
   806                           ;main.c: 163: unsigned char angle = 127;
   807  000114  0E7F               	movlw	127
   808  000116  6E32               	movwf	main@angle,c
   809                           
   810                           ;main.c: 165: initializePorts();
   811  000118  ECC5  F001         	call	_initializePorts	;wreg free
   812                           
   813                           ;main.c: 166: DelayMs(100);
   814  00011C  0E00               	movlw	0
   815  00011E  6E12               	movwf	DelayMs@i+1,c
   816  000120  0E64               	movlw	100
   817  000122  6E11               	movwf	DelayMs@i,c
   818  000124  EC48  F002         	call	_DelayMs	;wreg free
   819                           
   820                           ;main.c: 167: printf("Testing servo commands\r");
   821  000128  0E1F               	movlw	high STR_2
   822  00012A  6E1E               	movwf	printf@f+1,c
   823  00012C  0ED3               	movlw	low STR_2
   824  00012E  6E1D               	movwf	printf@f,c
   825  000130  EC2B  F001         	call	_printf	;wreg free
   826                           
   827                           ;main.c: 168: ADsetChannel(0);
   828  000134  0E00               	movlw	0
   829  000136  ECC0  F002         	call	_ADsetChannel
   830                           
   831                           ;main.c: 169: PORTAbits.RA4 = 0;
   832  00013A  9880               	bcf	3968,4,c	;volatile
   833  00013C                     l1457:
   834                           
   835                           ;main.c: 208: if (TMR0IF) {
   836  00013C  A4F2               	btfss	intcon,2,c	;volatile
   837  00013E  D7FE               	goto	l1457
   838                           
   839                           ;main.c: 209: TMR0IF = 0;
   840  000140  94F2               	bcf	intcon,2,c	;volatile
   841                           
   842                           ;main.c: 215: Timer0Counter++;
   843  000142  4A2F               	infsnz	main@Timer0Counter,f,c
   844  000144  2A30               	incf	main@Timer0Counter+1,f,c
   845                           
   846                           ;main.c: 216: if (Timer0Counter >= 4) {
   847  000146  0E04               	movlw	4
   848  000148  5C2F               	subwf	main@Timer0Counter,w,c
   849  00014A  0E00               	movlw	0
   850  00014C  5830               	subwfb	main@Timer0Counter+1,w,c
   851  00014E  A0D8               	btfss	status,0,c
   852  000150  D015               	goto	l1481
   853                           
   854                           ;main.c: 217: Timer0Counter = 0;
   855  000152  0E00               	movlw	0
   856  000154  6E30               	movwf	main@Timer0Counter+1,c
   857  000156  0E00               	movlw	0
   858  000158  6E2F               	movwf	main@Timer0Counter,c
   859                           
   860                           ;main.c: 218: if (stroke == 0) {
   861  00015A  6631               	tstfsz	main@stroke,c
   862  00015C  D008               	goto	l1475
   863                           
   864                           ;main.c: 219: if (angle < 127) angle++;
   865  00015E  0E7F               	movlw	127
   866  000160  5C32               	subwf	main@angle,w,c
   867  000162  B0D8               	btfsc	status,0,c
   868  000164  D002               	goto	l1473
   869  000166  2A32               	incf	main@angle,f,c
   870  000168  D009               	goto	l1481
   871  00016A                     l1473:
   872                           
   873                           ;main.c: 220: else stroke = 1;
   874  00016A  0E01               	movlw	1
   875  00016C  D006               	goto	L1
   876  00016E                     l1475:
   877                           
   878                           ;main.c: 222: if (angle > 0) angle--;
   879  00016E  5032               	movf	main@angle,w,c
   880  000170  B4D8               	btfsc	status,2,c
   881  000172  D002               	goto	l1479
   882  000174  0632               	decf	main@angle,f,c
   883  000176  D002               	goto	l1481
   884  000178                     l1479:
   885                           
   886                           ;main.c: 223: else stroke = 0;
   887  000178  0E00               	movlw	0
   888  00017A                     L1:
   889  00017A  6E31               	movwf	main@stroke,c
   890  00017C                     l1481:
   891                           
   892                           ;main.c: 224: }
   893                           ;main.c: 225: }
   894                           ;main.c: 227: DUTYbuffer[0] = DUTYbuffer[1] = DUTYbuffer[2] = DUTYbuffer[3] = DUTYbuffer
      +                          [4] = DUTYbuffer[5] = angle;
   895  00017C  C032  F038         	movff	main@angle,_DUTYbuffer+5
   896  000180  C038  F037         	movff	_DUTYbuffer+5,_DUTYbuffer+4
   897  000184  C037  F036         	movff	_DUTYbuffer+4,_DUTYbuffer+3
   898  000188  C036  F035         	movff	_DUTYbuffer+3,_DUTYbuffer+2
   899  00018C  C035  F034         	movff	_DUTYbuffer+2,_DUTYbuffer+1
   900  000190  C034  F033         	movff	_DUTYbuffer+1,_DUTYbuffer
   901                           
   902                           ;main.c: 229: dutyCycle[0] = convertDutyCycle(DUTYbuffer[0]);
   903  000194  5033               	movf	_DUTYbuffer,w,c
   904  000196  ECAC  F002         	call	_convertDutyCycle
   905  00019A  C011  F04A         	movff	?_convertDutyCycle,_dutyCycle
   906  00019E  C012  F04B         	movff	?_convertDutyCycle+1,_dutyCycle+1
   907                           
   908                           ;main.c: 230: dutyCycle[1] = convertDutyCycle(DUTYbuffer[1]);
   909  0001A2  5034               	movf	_DUTYbuffer+1,w,c
   910  0001A4  ECAC  F002         	call	_convertDutyCycle
   911  0001A8  C011  F04C         	movff	?_convertDutyCycle,_dutyCycle+2
   912  0001AC  C012  F04D         	movff	?_convertDutyCycle+1,_dutyCycle+3
   913                           
   914                           ;main.c: 231: dutyCycle[2] = convertDutyCycle(DUTYbuffer[2]);
   915  0001B0  5035               	movf	_DUTYbuffer+2,w,c
   916  0001B2  ECAC  F002         	call	_convertDutyCycle
   917  0001B6  C011  F04E         	movff	?_convertDutyCycle,_dutyCycle+4
   918  0001BA  C012  F04F         	movff	?_convertDutyCycle+1,_dutyCycle+5
   919                           
   920                           ;main.c: 232: dutyCycle[3] = convertDutyCycle(DUTYbuffer[3]);
   921  0001BE  5036               	movf	_DUTYbuffer+3,w,c
   922  0001C0  ECAC  F002         	call	_convertDutyCycle
   923  0001C4  C011  F050         	movff	?_convertDutyCycle,_dutyCycle+6
   924  0001C8  C012  F051         	movff	?_convertDutyCycle+1,_dutyCycle+7
   925                           
   926                           ;main.c: 233: dutyCycle[4] = convertDutyCycle(DUTYbuffer[4]);
   927  0001CC  5037               	movf	_DUTYbuffer+4,w,c
   928  0001CE  ECAC  F002         	call	_convertDutyCycle
   929  0001D2  C011  F052         	movff	?_convertDutyCycle,_dutyCycle+8
   930  0001D6  C012  F053         	movff	?_convertDutyCycle+1,_dutyCycle+9
   931                           
   932                           ;main.c: 234: dutyCycle[5] = convertDutyCycle(DUTYbuffer[5]);
   933  0001DA  5038               	movf	_DUTYbuffer+5,w,c
   934  0001DC  ECAC  F002         	call	_convertDutyCycle
   935  0001E0  C011  F054         	movff	?_convertDutyCycle,_dutyCycle+10
   936  0001E4  C012  F055         	movff	?_convertDutyCycle+1,_dutyCycle+11
   937                           
   938                           ;main.c: 238: if (OVDCOND == 0b00010101) {
   939  0001E8  5083               	movf	3971,w,c	;volatile
   940  0001EA  0A15               	xorlw	21
   941  0001EC  A4D8               	btfss	status,2,c
   942  0001EE  D017               	goto	l1517
   943                           
   944                           ;main.c: 239: OVDCOND = 0b00101010;
   945  0001F0  0E2A               	movlw	42
   946  0001F2  6E83               	movwf	3971,c	;volatile
   947                           
   948                           ;main.c: 240: integer.val = dutyCycle[1];
   949  0001F4  C04C  F048         	movff	_dutyCycle+2,_integer
   950  0001F8  C04D  F049         	movff	_dutyCycle+3,_integer+1
   951                           
   952                           ;main.c: 241: PDC0L = integer.byte[0];
   953  0001FC  C048  FF91         	movff	_integer,3985	;volatile
   954                           
   955                           ;main.c: 242: PDC0H = integer.byte[1];
   956  000200  C049  FF90         	movff	_integer+1,3984	;volatile
   957                           
   958                           ;main.c: 244: integer.val = dutyCycle[3];
   959  000204  C050  F048         	movff	_dutyCycle+6,_integer
   960  000208  C051  F049         	movff	_dutyCycle+7,_integer+1
   961                           
   962                           ;main.c: 245: PDC1L = integer.byte[0];
   963  00020C  C048  FF8F         	movff	_integer,3983	;volatile
   964                           
   965                           ;main.c: 246: PDC1H = integer.byte[1];
   966  000210  C049  FF8E         	movff	_integer+1,3982	;volatile
   967                           
   968                           ;main.c: 248: integer.val = dutyCycle[5];
   969  000214  C054  F048         	movff	_dutyCycle+10,_integer
   970  000218  C055  F049         	movff	_dutyCycle+11,_integer+1
   971  00021C  D016               	goto	L2
   972  00021E                     l1517:
   973                           
   974                           ;main.c: 252: OVDCOND = 0b00010101;
   975  00021E  0E15               	movlw	21
   976  000220  6E83               	movwf	3971,c	;volatile
   977                           
   978                           ;main.c: 253: integer.val = dutyCycle[0];
   979  000222  C04A  F048         	movff	_dutyCycle,_integer
   980  000226  C04B  F049         	movff	_dutyCycle+1,_integer+1
   981                           
   982                           ;main.c: 254: PDC0L = integer.byte[0];
   983  00022A  C048  FF91         	movff	_integer,3985	;volatile
   984                           
   985                           ;main.c: 255: PDC0H = integer.byte[1];
   986  00022E  C049  FF90         	movff	_integer+1,3984	;volatile
   987                           
   988                           ;main.c: 257: integer.val = dutyCycle[2];
   989  000232  C04E  F048         	movff	_dutyCycle+4,_integer
   990  000236  C04F  F049         	movff	_dutyCycle+5,_integer+1
   991                           
   992                           ;main.c: 258: PDC1L = integer.byte[0];
   993  00023A  C048  FF8F         	movff	_integer,3983	;volatile
   994                           
   995                           ;main.c: 259: PDC1H = integer.byte[1];
   996  00023E  C049  FF8E         	movff	_integer+1,3982	;volatile
   997                           
   998                           ;main.c: 261: integer.val = dutyCycle[4];
   999  000242  C052  F048         	movff	_dutyCycle+8,_integer
  1000  000246  C053  F049         	movff	_dutyCycle+9,_integer+1
  1001  00024A                     L2:
  1002                           
  1003                           ;main.c: 262: PDC2L = integer.byte[0];
  1004  00024A  C048  FF8D         	movff	_integer,3981	;volatile
  1005                           
  1006                           ;main.c: 263: PDC2H = integer.byte[1];
  1007  00024E  C049  FF8C         	movff	_integer+1,3980	;volatile
  1008                           
  1009                           ;main.c: 264: }
  1010                           ;main.c: 265: PTEN = 1;
  1011  000252  8E99               	bsf	3993,7,c	;volatile
  1012  000254  D773               	goto	l1457
  1013  000256                     __end_of_main:
  1014                           	opt stack 0
  1015                           tblptru	equ	0xFF8
  1016                           tblptrh	equ	0xFF7
  1017                           tblptrl	equ	0xFF6
  1018                           tablat	equ	0xFF5
  1019                           intcon	equ	0xFF2
  1020                           postinc0	equ	0xFEE
  1021                           wreg	equ	0xFE8
  1022                           postdec1	equ	0xFE5
  1023                           fsr1l	equ	0xFE1
  1024                           status	equ	0xFD8
  1025                           
  1026 ;; *************** function _printf *****************
  1027 ;; Defined at:
  1028 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\doprnt.c"
  1029 ;; Parameters:    Size  Location     Type
  1030 ;;  f               2   28[COMRAM] PTR const unsigned char 
  1031 ;;		 -> STR_2(24), STR_1(20), 
  1032 ;; Auto vars:     Size  Location     Type
  1033 ;;  _val            5   38[COMRAM] struct .
  1034 ;;  ap              2   34[COMRAM] PTR void [1]
  1035 ;;		 -> ?_printf(2), 
  1036 ;;  c               1   43[COMRAM] char 
  1037 ;;  prec            1   37[COMRAM] char 
  1038 ;;  flag            1   36[COMRAM] unsigned char 
  1039 ;; Return value:  Size  Location     Type
  1040 ;;                  2   28[COMRAM] int 
  1041 ;; Registers used:
  1042 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1043 ;; Tracked objects:
  1044 ;;		On entry : 0/0
  1045 ;;		On exit  : 0/0
  1046 ;;		Unchanged: 0/0
  1047 ;; Data sizes:     COMRAM   BANK0
  1048 ;;      Params:         4       0
  1049 ;;      Locals:        10       0
  1050 ;;      Temps:          2       0
  1051 ;;      Totals:        16       0
  1052 ;;Total ram usage:       16 bytes
  1053 ;; Hardware stack levels used:    1
  1054 ;; Hardware stack levels required when called:    2
  1055 ;; This function calls:
  1056 ;;		___lwdiv
  1057 ;;		___lwmod
  1058 ;;		_putch
  1059 ;; This function is called by:
  1060 ;;		_main
  1061 ;;		_processInBuffer
  1062 ;; This function uses a non-reentrant model
  1063 ;;
  1064                           
  1065                           	psect	text1
  1066  000256                     __ptext1:
  1067                           	opt stack 0
  1068  000256                     _printf:
  1069                           	opt stack 28
  1070                           
  1071                           ;doprnt.c: 466: va_list ap;
  1072                           ;doprnt.c: 499: signed char c;
  1073                           ;doprnt.c: 506: signed char prec;
  1074                           ;doprnt.c: 508: unsigned char flag;
  1075                           ;doprnt.c: 527: union {
  1076                           ;doprnt.c: 528: unsigned int _val;
  1077                           ;doprnt.c: 529: struct {
  1078                           ;doprnt.c: 530: const char * _cp;
  1079                           ;doprnt.c: 531: unsigned _len;
  1080                           ;doprnt.c: 532: } _str;
  1081                           ;doprnt.c: 533: } _val;
  1082                           ;doprnt.c: 542: *ap = __va_start();
  1083                           
  1084                           ;incstack = 0
  1085  000256  0E00               	movlw	high (?_printf+2)
  1086  000258  6E24               	movwf	printf@ap+1,c
  1087  00025A  0E1F               	movlw	low (?_printf+2)
  1088  00025C  6E23               	movwf	printf@ap,c
  1089                           
  1090                           ;doprnt.c: 545: while(c = *f++) {
  1091  00025E  D089               	goto	l1409
  1092  000260                     l1363:
  1093                           
  1094                           ;doprnt.c: 547: if(c != '%')
  1095  000260  502C               	movf	printf@c,w,c
  1096  000262  0A25               	xorlw	37
  1097  000264  B4D8               	btfsc	status,2,c
  1098  000266  D004               	goto	l1367
  1099                           
  1100                           ;doprnt.c: 549: {
  1101                           ;doprnt.c: 550: (putch(c) );
  1102  000268  502C               	movf	printf@c,w,c
  1103  00026A  ECD1  F002         	call	_putch
  1104                           
  1105                           ;doprnt.c: 551: continue;
  1106  00026E  D081               	goto	l1409
  1107  000270                     l1367:
  1108                           
  1109                           ;doprnt.c: 552: }
  1110                           ;doprnt.c: 557: flag = 0;
  1111  000270  0E00               	movlw	0
  1112  000272  6E25               	movwf	printf@flag,c
  1113                           
  1114                           ;doprnt.c: 831: }
  1115                           
  1116                           ;doprnt.c: 822: continue;
  1117                           
  1118                           ;doprnt.c: 811: default:
  1119                           
  1120                           ;doprnt.c: 707: case 'i':
  1121                           ;doprnt.c: 708: break;
  1122                           
  1123                           ;doprnt.c: 706: case 'd':
  1124                           
  1125                           ;doprnt.c: 647: goto alldone;
  1126                           
  1127                           ;doprnt.c: 646: case 0:
  1128                           
  1129                           ;doprnt.c: 644: switch(c = *f++) {
  1130  000274  C01D  FFF6         	movff	printf@f,tblptrl
  1131  000278  C01E  FFF7         	movff	printf@f+1,tblptrh
  1132  00027C  4A1D               	infsnz	printf@f,f,c
  1133  00027E  2A1E               	incf	printf@f+1,f,c
  1134  000280                     	if	0	;tblptru may be non-zero
  1135  000280                     	endif
  1136  000280                     	if	0	;tblptru may be non-zero
  1137  000280                     	endif
  1138  000280  0008               	tblrd		*
  1139  000282  CFF5 F02C          	movff	tablat,printf@c
  1140  000286  502C               	movf	printf@c& (0+255),w,c
  1141                           
  1142                           ; Switch size 1, requested type "space"
  1143                           ; Number of cases is 3, Range of values is 0 to 105
  1144                           ; switch strategies available:
  1145                           ; Name         Instructions Cycles
  1146                           ; simple_byte           10     6 (average)
  1147                           ;	Chosen strategy is simple_byte
  1148  000288  0A00               	xorlw	0	; case 0
  1149  00028A  B4D8               	btfsc	status,2,c
  1150  00028C  0012               	return	
  1151  00028E  0A64               	xorlw	100	; case 100
  1152  000290  B4D8               	btfsc	status,2,c
  1153  000292  D003               	goto	l1373
  1154  000294  0A0D               	xorlw	13	; case 105
  1155  000296  A4D8               	btfss	status,2,c
  1156  000298  D06C               	goto	l1409
  1157  00029A                     l1373:
  1158                           
  1159                           ;doprnt.c: 1262: {
  1160                           ;doprnt.c: 1268: _val._val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1161  00029A  C023  FFD9         	movff	printf@ap,fsr2l
  1162  00029E  C024  FFDA         	movff	printf@ap+1,fsr2h
  1163  0002A2  CFDE F027          	movff	postinc2,printf@_val
  1164  0002A6  CFDD F028          	movff	postdec2,printf@_val+1
  1165  0002AA  0E02               	movlw	2
  1166  0002AC  2623               	addwf	printf@ap,f,c
  1167  0002AE  0E00               	movlw	0
  1168  0002B0  2224               	addwfc	printf@ap+1,f,c
  1169                           
  1170                           ;doprnt.c: 1270: if((int)_val._val < 0) {
  1171  0002B2  5028               	movf	printf@_val+1,w,c
  1172  0002B4  0A80               	xorlw	128
  1173  0002B6  6EF3               	movwf	prodl,c
  1174  0002B8  0E80               	movlw	128
  1175  0002BA  5CF3               	subwf	prodl,w,c
  1176  0002BC  0E00               	movlw	0
  1177  0002BE  B4D8               	btfsc	status,2,c
  1178  0002C0  5C27               	subwf	printf@_val,w,c
  1179  0002C2  B0D8               	btfsc	status,0,c
  1180  0002C4  D006               	goto	l1383
  1181                           
  1182                           ;doprnt.c: 1271: flag |= 0x03;
  1183  0002C6  0E03               	movlw	3
  1184  0002C8  1225               	iorwf	printf@flag,f,c
  1185                           
  1186                           ;doprnt.c: 1272: _val._val = -_val._val;
  1187  0002CA  6C27               	negf	printf@_val,c
  1188  0002CC  1E28               	comf	printf@_val+1,f,c
  1189  0002CE  B0D8               	btfsc	status,0,c
  1190  0002D0  2A28               	incf	printf@_val+1,f,c
  1191  0002D2                     l1383:
  1192                           
  1193                           ;doprnt.c: 1273: }
  1194                           ;doprnt.c: 1275: }
  1195                           ;doprnt.c: 1314: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1196  0002D2  0E01               	movlw	1
  1197  0002D4  6E2C               	movwf	printf@c,c
  1198  0002D6  502C               	movf	printf@c,w,c
  1199  0002D8  0A05               	xorlw	5
  1200  0002DA  B4D8               	btfsc	status,2,c
  1201  0002DC  D016               	goto	l1397
  1202                           
  1203                           ;doprnt.c: 1315: if(_val._val < dpowers[c])
  1204  0002DE  502C               	movf	printf@c,w,c
  1205  0002E0  0D02               	mullw	2
  1206  0002E2  0EC9               	movlw	low _dpowers
  1207  0002E4  24F3               	addwf	prodl,w,c
  1208  0002E6  6EF6               	movwf	tblptrl,c
  1209  0002E8  0E1F               	movlw	high _dpowers
  1210  0002EA  20F4               	addwfc	prodh,w,c
  1211  0002EC  6EF7               	movwf	tblptrh,c
  1212  0002EE                     	if	0	;There are less than 3 active tblptr bytes
  1213  0002EE                     	endif
  1214  0002EE  0009               	tblrd		*+
  1215  0002F0  CFF5 F021          	movff	tablat,??_printf
  1216  0002F4  0009               	tblrd		*+
  1217  0002F6  CFF5 F022          	movff	tablat,??_printf+1
  1218  0002FA  5021               	movf	??_printf,w,c
  1219  0002FC  5C27               	subwf	printf@_val,w,c
  1220  0002FE  5022               	movf	??_printf+1,w,c
  1221  000300  5828               	subwfb	printf@_val+1,w,c
  1222  000302  A0D8               	btfss	status,0,c
  1223  000304  D002               	goto	l1397
  1224                           
  1225                           ;doprnt.c: 1316: break;
  1226  000306  2A2C               	incf	printf@c,f,c
  1227  000308  D7E6               	goto	L3
  1228  00030A                     l1397:
  1229                           
  1230                           ;doprnt.c: 1431: {
  1231                           ;doprnt.c: 1447: if(flag & 0x03)
  1232  00030A  C025  F021         	movff	printf@flag,??_printf
  1233  00030E  0E03               	movlw	3
  1234  000310  1621               	andwf	??_printf,f,c
  1235  000312  B4D8               	btfsc	status,2,c
  1236  000314  D003               	goto	l1401
  1237                           
  1238                           ;doprnt.c: 1448: (putch('-') );
  1239  000316  0E2D               	movlw	45
  1240  000318  ECD1  F002         	call	_putch
  1241  00031C                     l1401:
  1242                           
  1243                           ;doprnt.c: 1478: }
  1244                           ;doprnt.c: 1481: prec = c;
  1245  00031C  C02C  F026         	movff	printf@c,printf@prec
  1246                           
  1247                           ;doprnt.c: 1483: while(prec--) {
  1248  000320  D024               	goto	l1407
  1249  000322                     l1403:
  1250                           
  1251                           ;doprnt.c: 1487: {
  1252                           ;doprnt.c: 1498: c = (_val._val / dpowers[prec]) % 10 + '0';
  1253  000322  5026               	movf	printf@prec,w,c
  1254  000324  0D02               	mullw	2
  1255  000326  0EC9               	movlw	low _dpowers
  1256  000328  24F3               	addwf	prodl,w,c
  1257  00032A  6EF6               	movwf	tblptrl,c
  1258  00032C  0E1F               	movlw	high _dpowers
  1259  00032E  20F4               	addwfc	prodh,w,c
  1260  000330  6EF7               	movwf	tblptrh,c
  1261  000332                     	if	0	;There are less than 3 active tblptr bytes
  1262  000332                     	endif
  1263  000332  0009               	tblrd		*+
  1264  000334  CFF5 F013          	movff	tablat,___lwdiv@divisor
  1265  000338  000A               	tblrd		*-
  1266  00033A  CFF5 F014          	movff	tablat,___lwdiv@divisor+1
  1267  00033E  C027  F011         	movff	printf@_val,___lwdiv@dividend
  1268  000342  C028  F012         	movff	printf@_val+1,___lwdiv@dividend+1
  1269  000346  EC1F  F002         	call	___lwdiv	;wreg free
  1270  00034A  C011  F018         	movff	?___lwdiv,___lwmod@dividend
  1271  00034E  C012  F019         	movff	?___lwdiv+1,___lwmod@dividend+1
  1272  000352  0E00               	movlw	0
  1273  000354  6E1B               	movwf	___lwmod@divisor+1,c
  1274  000356  0E0A               	movlw	10
  1275  000358  6E1A               	movwf	___lwmod@divisor,c
  1276  00035A  EC8B  F002         	call	___lwmod	;wreg free
  1277  00035E  5018               	movf	?___lwmod,w,c
  1278  000360  0F30               	addlw	48
  1279  000362  6E2C               	movwf	printf@c,c
  1280                           
  1281                           ;doprnt.c: 1532: }
  1282                           ;doprnt.c: 1533: (putch(c) );
  1283  000364  502C               	movf	printf@c,w,c
  1284  000366  ECD1  F002         	call	_putch
  1285  00036A                     l1407:
  1286  00036A  0626               	decf	printf@prec,f,c
  1287  00036C  2826               	incf	printf@prec& (0+255),w,c
  1288  00036E  A4D8               	btfss	status,2,c
  1289  000370  D7D8               	goto	l1403
  1290  000372                     l1409:
  1291  000372  C01D  FFF6         	movff	printf@f,tblptrl
  1292  000376  C01E  FFF7         	movff	printf@f+1,tblptrh
  1293  00037A  4A1D               	infsnz	printf@f,f,c
  1294  00037C  2A1E               	incf	printf@f+1,f,c
  1295  00037E                     	if	0	;tblptru may be non-zero
  1296  00037E                     	endif
  1297  00037E                     	if	0	;tblptru may be non-zero
  1298  00037E                     	endif
  1299  00037E  0008               	tblrd		*
  1300  000380  CFF5 F02C          	movff	tablat,printf@c
  1301  000384  662C               	tstfsz	printf@c& (0+255),c
  1302  000386  D76C               	goto	l1363
  1303  000388  0012               	return	
  1304  00038A                     __end_of_printf:
  1305                           	opt stack 0
  1306                           tblptru	equ	0xFF8
  1307                           tblptrh	equ	0xFF7
  1308                           tblptrl	equ	0xFF6
  1309                           tablat	equ	0xFF5
  1310                           prodh	equ	0xFF4
  1311                           prodl	equ	0xFF3
  1312                           intcon	equ	0xFF2
  1313                           postinc0	equ	0xFEE
  1314                           wreg	equ	0xFE8
  1315                           postdec1	equ	0xFE5
  1316                           fsr1l	equ	0xFE1
  1317                           postinc2	equ	0xFDE
  1318                           postdec2	equ	0xFDD
  1319                           fsr2h	equ	0xFDA
  1320                           fsr2l	equ	0xFD9
  1321                           status	equ	0xFD8
  1322                           
  1323 ;; *************** function _putch *****************
  1324 ;; Defined at:
  1325 ;;		line 375 in file "../main.c"
  1326 ;; Parameters:    Size  Location     Type
  1327 ;;  ch              1    wreg     unsigned char 
  1328 ;; Auto vars:     Size  Location     Type
  1329 ;;  ch              1   16[COMRAM] unsigned char 
  1330 ;; Return value:  Size  Location     Type
  1331 ;;		None               void
  1332 ;; Registers used:
  1333 ;;		wreg
  1334 ;; Tracked objects:
  1335 ;;		On entry : 0/0
  1336 ;;		On exit  : 0/0
  1337 ;;		Unchanged: 0/0
  1338 ;; Data sizes:     COMRAM   BANK0
  1339 ;;      Params:         0       0
  1340 ;;      Locals:         1       0
  1341 ;;      Temps:          0       0
  1342 ;;      Totals:         1       0
  1343 ;;Total ram usage:        1 bytes
  1344 ;; Hardware stack levels used:    1
  1345 ;; Hardware stack levels required when called:    1
  1346 ;; This function calls:
  1347 ;;		Nothing
  1348 ;; This function is called by:
  1349 ;;		_printf
  1350 ;; This function uses a non-reentrant model
  1351 ;;
  1352                           
  1353                           	psect	text2
  1354  0005A2                     __ptext2:
  1355                           	opt stack 0
  1356  0005A2                     _putch:
  1357                           	opt stack 28
  1358                           
  1359                           ;incstack = 0
  1360                           ;putch@ch stored from wreg
  1361  0005A2  6E11               	movwf	putch@ch,c
  1362  0005A4                     l254:
  1363  0005A4  A89E               	btfss	3998,4,c	;volatile
  1364  0005A6  D7FE               	goto	l254
  1365                           
  1366                           ;main.c: 378: TXREG = ch;
  1367  0005A8  C011  FFAD         	movff	putch@ch,4013	;volatile
  1368  0005AC  0012               	return	
  1369  0005AE                     __end_of_putch:
  1370                           	opt stack 0
  1371                           tblptru	equ	0xFF8
  1372                           tblptrh	equ	0xFF7
  1373                           tblptrl	equ	0xFF6
  1374                           tablat	equ	0xFF5
  1375                           prodh	equ	0xFF4
  1376                           prodl	equ	0xFF3
  1377                           intcon	equ	0xFF2
  1378                           postinc0	equ	0xFEE
  1379                           wreg	equ	0xFE8
  1380                           postdec1	equ	0xFE5
  1381                           fsr1l	equ	0xFE1
  1382                           postinc2	equ	0xFDE
  1383                           postdec2	equ	0xFDD
  1384                           fsr2h	equ	0xFDA
  1385                           fsr2l	equ	0xFD9
  1386                           status	equ	0xFD8
  1387                           
  1388 ;; *************** function ___lwmod *****************
  1389 ;; Defined at:
  1390 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lwmod.c"
  1391 ;; Parameters:    Size  Location     Type
  1392 ;;  dividend        2   23[COMRAM] unsigned int 
  1393 ;;  divisor         2   25[COMRAM] unsigned int 
  1394 ;; Auto vars:     Size  Location     Type
  1395 ;;  counter         1   27[COMRAM] unsigned char 
  1396 ;; Return value:  Size  Location     Type
  1397 ;;                  2   23[COMRAM] unsigned int 
  1398 ;; Registers used:
  1399 ;;		wreg, status,2, status,0
  1400 ;; Tracked objects:
  1401 ;;		On entry : 0/0
  1402 ;;		On exit  : 0/0
  1403 ;;		Unchanged: 0/0
  1404 ;; Data sizes:     COMRAM   BANK0
  1405 ;;      Params:         4       0
  1406 ;;      Locals:         1       0
  1407 ;;      Temps:          0       0
  1408 ;;      Totals:         5       0
  1409 ;;Total ram usage:        5 bytes
  1410 ;; Hardware stack levels used:    1
  1411 ;; Hardware stack levels required when called:    1
  1412 ;; This function calls:
  1413 ;;		Nothing
  1414 ;; This function is called by:
  1415 ;;		_printf
  1416 ;; This function uses a non-reentrant model
  1417 ;;
  1418                           
  1419                           	psect	text3
  1420  000516                     __ptext3:
  1421                           	opt stack 0
  1422  000516                     ___lwmod:
  1423                           	opt stack 28
  1424                           
  1425                           ;incstack = 0
  1426  000516  501B               	movf	___lwmod@divisor+1,w,c
  1427  000518  101A               	iorwf	___lwmod@divisor,w,c
  1428  00051A  B4D8               	btfsc	status,2,c
  1429  00051C  D018               	goto	l850
  1430  00051E  0E01               	movlw	1
  1431  000520  6E1C               	movwf	___lwmod@counter,c
  1432  000522  D004               	goto	l1351
  1433  000524                     l1349:
  1434  000524  90D8               	bcf	status,0,c
  1435  000526  361A               	rlcf	___lwmod@divisor,f,c
  1436  000528  361B               	rlcf	___lwmod@divisor+1,f,c
  1437  00052A  2A1C               	incf	___lwmod@counter,f,c
  1438  00052C                     l1351:
  1439  00052C  AE1B               	btfss	___lwmod@divisor+1,7,c
  1440  00052E  D7FA               	goto	l1349
  1441  000530                     l1353:
  1442  000530  501A               	movf	___lwmod@divisor,w,c
  1443  000532  5C18               	subwf	___lwmod@dividend,w,c
  1444  000534  501B               	movf	___lwmod@divisor+1,w,c
  1445  000536  5819               	subwfb	___lwmod@dividend+1,w,c
  1446  000538  A0D8               	btfss	status,0,c
  1447  00053A  D004               	goto	l1357
  1448  00053C  501A               	movf	___lwmod@divisor,w,c
  1449  00053E  5E18               	subwf	___lwmod@dividend,f,c
  1450  000540  501B               	movf	___lwmod@divisor+1,w,c
  1451  000542  5A19               	subwfb	___lwmod@dividend+1,f,c
  1452  000544                     l1357:
  1453  000544  90D8               	bcf	status,0,c
  1454  000546  321B               	rrcf	___lwmod@divisor+1,f,c
  1455  000548  321A               	rrcf	___lwmod@divisor,f,c
  1456  00054A  2E1C               	decfsz	___lwmod@counter,f,c
  1457  00054C  D7F1               	goto	l1353
  1458  00054E                     l850:
  1459  00054E  C018  F018         	movff	___lwmod@dividend,?___lwmod
  1460  000552  C019  F019         	movff	___lwmod@dividend+1,?___lwmod+1
  1461  000556  0012               	return	
  1462  000558                     __end_of___lwmod:
  1463                           	opt stack 0
  1464                           tblptru	equ	0xFF8
  1465                           tblptrh	equ	0xFF7
  1466                           tblptrl	equ	0xFF6
  1467                           tablat	equ	0xFF5
  1468                           prodh	equ	0xFF4
  1469                           prodl	equ	0xFF3
  1470                           intcon	equ	0xFF2
  1471                           postinc0	equ	0xFEE
  1472                           wreg	equ	0xFE8
  1473                           postdec1	equ	0xFE5
  1474                           fsr1l	equ	0xFE1
  1475                           postinc2	equ	0xFDE
  1476                           postdec2	equ	0xFDD
  1477                           fsr2h	equ	0xFDA
  1478                           fsr2l	equ	0xFD9
  1479                           status	equ	0xFD8
  1480                           
  1481 ;; *************** function ___lwdiv *****************
  1482 ;; Defined at:
  1483 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lwdiv.c"
  1484 ;; Parameters:    Size  Location     Type
  1485 ;;  dividend        2   16[COMRAM] unsigned int 
  1486 ;;  divisor         2   18[COMRAM] unsigned int 
  1487 ;; Auto vars:     Size  Location     Type
  1488 ;;  quotient        2   20[COMRAM] unsigned int 
  1489 ;;  counter         1   22[COMRAM] unsigned char 
  1490 ;; Return value:  Size  Location     Type
  1491 ;;                  2   16[COMRAM] unsigned int 
  1492 ;; Registers used:
  1493 ;;		wreg, status,2, status,0
  1494 ;; Tracked objects:
  1495 ;;		On entry : 0/0
  1496 ;;		On exit  : 0/0
  1497 ;;		Unchanged: 0/0
  1498 ;; Data sizes:     COMRAM   BANK0
  1499 ;;      Params:         4       0
  1500 ;;      Locals:         3       0
  1501 ;;      Temps:          0       0
  1502 ;;      Totals:         7       0
  1503 ;;Total ram usage:        7 bytes
  1504 ;; Hardware stack levels used:    1
  1505 ;; Hardware stack levels required when called:    1
  1506 ;; This function calls:
  1507 ;;		Nothing
  1508 ;; This function is called by:
  1509 ;;		_printf
  1510 ;; This function uses a non-reentrant model
  1511 ;;
  1512                           
  1513                           	psect	text4
  1514  00043E                     __ptext4:
  1515                           	opt stack 0
  1516  00043E                     ___lwdiv:
  1517                           	opt stack 28
  1518                           
  1519                           ;incstack = 0
  1520  00043E  0E00               	movlw	0
  1521  000440  6E16               	movwf	___lwdiv@quotient+1,c
  1522  000442  0E00               	movlw	0
  1523  000444  6E15               	movwf	___lwdiv@quotient,c
  1524  000446  5014               	movf	___lwdiv@divisor+1,w,c
  1525  000448  1013               	iorwf	___lwdiv@divisor,w,c
  1526  00044A  B4D8               	btfsc	status,2,c
  1527  00044C  D01C               	goto	l840
  1528  00044E  0E01               	movlw	1
  1529  000450  6E17               	movwf	___lwdiv@counter,c
  1530  000452  D004               	goto	l1331
  1531  000454                     l1329:
  1532  000454  90D8               	bcf	status,0,c
  1533  000456  3613               	rlcf	___lwdiv@divisor,f,c
  1534  000458  3614               	rlcf	___lwdiv@divisor+1,f,c
  1535  00045A  2A17               	incf	___lwdiv@counter,f,c
  1536  00045C                     l1331:
  1537  00045C  AE14               	btfss	___lwdiv@divisor+1,7,c
  1538  00045E  D7FA               	goto	l1329
  1539  000460                     l1333:
  1540  000460  90D8               	bcf	status,0,c
  1541  000462  3615               	rlcf	___lwdiv@quotient,f,c
  1542  000464  3616               	rlcf	___lwdiv@quotient+1,f,c
  1543  000466  5013               	movf	___lwdiv@divisor,w,c
  1544  000468  5C11               	subwf	___lwdiv@dividend,w,c
  1545  00046A  5014               	movf	___lwdiv@divisor+1,w,c
  1546  00046C  5812               	subwfb	___lwdiv@dividend+1,w,c
  1547  00046E  A0D8               	btfss	status,0,c
  1548  000470  D005               	goto	l1341
  1549  000472  5013               	movf	___lwdiv@divisor,w,c
  1550  000474  5E11               	subwf	___lwdiv@dividend,f,c
  1551  000476  5014               	movf	___lwdiv@divisor+1,w,c
  1552  000478  5A12               	subwfb	___lwdiv@dividend+1,f,c
  1553  00047A  8015               	bsf	___lwdiv@quotient,0,c
  1554  00047C                     l1341:
  1555  00047C  90D8               	bcf	status,0,c
  1556  00047E  3214               	rrcf	___lwdiv@divisor+1,f,c
  1557  000480  3213               	rrcf	___lwdiv@divisor,f,c
  1558  000482  2E17               	decfsz	___lwdiv@counter,f,c
  1559  000484  D7ED               	goto	l1333
  1560  000486                     l840:
  1561  000486  C015  F011         	movff	___lwdiv@quotient,?___lwdiv
  1562  00048A  C016  F012         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1563  00048E  0012               	return	
  1564  000490                     __end_of___lwdiv:
  1565                           	opt stack 0
  1566                           tblptru	equ	0xFF8
  1567                           tblptrh	equ	0xFF7
  1568                           tblptrl	equ	0xFF6
  1569                           tablat	equ	0xFF5
  1570                           prodh	equ	0xFF4
  1571                           prodl	equ	0xFF3
  1572                           intcon	equ	0xFF2
  1573                           postinc0	equ	0xFEE
  1574                           wreg	equ	0xFE8
  1575                           postdec1	equ	0xFE5
  1576                           fsr1l	equ	0xFE1
  1577                           postinc2	equ	0xFDE
  1578                           postdec2	equ	0xFDD
  1579                           fsr2h	equ	0xFDA
  1580                           fsr2l	equ	0xFD9
  1581                           status	equ	0xFD8
  1582                           
  1583 ;; *************** function _initializePorts *****************
  1584 ;; Defined at:
  1585 ;;		line 280 in file "../main.c"
  1586 ;; Parameters:    Size  Location     Type
  1587 ;;		None
  1588 ;; Auto vars:     Size  Location     Type
  1589 ;;		None
  1590 ;; Return value:  Size  Location     Type
  1591 ;;		None               void
  1592 ;; Registers used:
  1593 ;;		wreg, status,2
  1594 ;; Tracked objects:
  1595 ;;		On entry : 0/0
  1596 ;;		On exit  : 0/0
  1597 ;;		Unchanged: 0/0
  1598 ;; Data sizes:     COMRAM   BANK0
  1599 ;;      Params:         0       0
  1600 ;;      Locals:         0       0
  1601 ;;      Temps:          0       0
  1602 ;;      Totals:         0       0
  1603 ;;Total ram usage:        0 bytes
  1604 ;; Hardware stack levels used:    1
  1605 ;; Hardware stack levels required when called:    1
  1606 ;; This function calls:
  1607 ;;		Nothing
  1608 ;; This function is called by:
  1609 ;;		_main
  1610 ;; This function uses a non-reentrant model
  1611 ;;
  1612                           
  1613                           	psect	text5
  1614  00038A                     __ptext5:
  1615                           	opt stack 0
  1616  00038A                     _initializePorts:
  1617                           	opt stack 29
  1618                           
  1619                           ;main.c: 281: INTCON = 0x00;
  1620                           
  1621                           ;incstack = 0
  1622  00038A  0E00               	movlw	0
  1623  00038C  6EF2               	movwf	intcon,c	;volatile
  1624                           
  1625                           ;main.c: 282: PIE1 = 0;
  1626  00038E  0E00               	movlw	0
  1627  000390  6E9D               	movwf	3997,c	;volatile
  1628                           
  1629                           ;main.c: 285: ADCON0 = 0b00000000;
  1630  000392  0E00               	movlw	0
  1631  000394  6EC2               	movwf	4034,c	;volatile
  1632                           
  1633                           ;main.c: 286: ADCON1 = 0b000001110;
  1634  000396  0E0E               	movlw	14
  1635  000398  6EC1               	movwf	4033,c	;volatile
  1636                           
  1637                           ;main.c: 287: ADCON2 = 0;
  1638  00039A  0E00               	movlw	0
  1639  00039C  6EC0               	movwf	4032,c	;volatile
  1640                           
  1641                           ;main.c: 288: ADCON2bits.ADFM = 0;
  1642  00039E  9EC0               	bcf	4032,7,c	;volatile
  1643                           
  1644                           ;main.c: 289: ADCON2bits.ACQT2 = 1;
  1645  0003A0  8AC0               	bsf	4032,5,c	;volatile
  1646                           
  1647                           ;main.c: 290: ADCON2bits.ACQT1 = 1;
  1648  0003A2  88C0               	bsf	4032,4,c	;volatile
  1649                           
  1650                           ;main.c: 291: ADCON2bits.ACQT0 = 1;
  1651  0003A4  86C0               	bsf	4032,3,c	;volatile
  1652                           
  1653                           ;main.c: 292: ADCON2bits.ADCS2 = 1;
  1654  0003A6  84C0               	bsf	4032,2,c	;volatile
  1655                           
  1656                           ;main.c: 293: ADCON2bits.ADCS1 = 0;
  1657  0003A8  92C0               	bcf	4032,1,c	;volatile
  1658                           
  1659                           ;main.c: 294: ADCON2bits.ADCS0 = 1;
  1660  0003AA  80C0               	bsf	4032,0,c	;volatile
  1661                           
  1662                           ;main.c: 296: TRISA = 0b00001111;
  1663  0003AC  0E0F               	movlw	15
  1664  0003AE  6E92               	movwf	3986,c	;volatile
  1665                           
  1666                           ;main.c: 297: TRISB = 0b00000000;
  1667  0003B0  0E00               	movlw	0
  1668  0003B2  6E93               	movwf	3987,c	;volatile
  1669                           
  1670                           ;main.c: 298: RBPU = 0;
  1671  0003B4  9EF1               	bcf	intcon2,7,c	;volatile
  1672                           
  1673                           ;main.c: 301: T0CON = 0x00;
  1674  0003B6  0E00               	movlw	0
  1675  0003B8  6ED5               	movwf	4053,c	;volatile
  1676                           
  1677                           ;main.c: 302: T016BIT = 1;
  1678  0003BA  8CD5               	bsf	4053,6,c	;volatile
  1679                           
  1680                           ;main.c: 303: PSA = 0;
  1681  0003BC  96D5               	bcf	4053,3,c	;volatile
  1682                           
  1683                           ;main.c: 304: T0PS0 = 0;
  1684  0003BE  90D5               	bcf	4053,0,c	;volatile
  1685                           
  1686                           ;main.c: 305: T0PS1 = 1;
  1687  0003C0  82D5               	bsf	4053,1,c	;volatile
  1688                           
  1689                           ;main.c: 306: T0PS2 = 1;
  1690  0003C2  84D5               	bsf	4053,2,c	;volatile
  1691                           
  1692                           ;main.c: 307: T0CS = 0;
  1693  0003C4  9AD5               	bcf	4053,5,c	;volatile
  1694                           
  1695                           ;main.c: 308: T0SE = 0;
  1696  0003C6  98D5               	bcf	4053,4,c	;volatile
  1697                           
  1698                           ;main.c: 309: TMR0ON = 1;
  1699  0003C8  8ED5               	bsf	4053,7,c	;volatile
  1700                           
  1701                           ;main.c: 310: TMR0IF = 0;
  1702  0003CA  94F2               	bcf	intcon,2,c	;volatile
  1703                           
  1704                           ;main.c: 312: T1CON = 0;
  1705  0003CC  0E00               	movlw	0
  1706  0003CE  6ECD               	movwf	4045,c	;volatile
  1707                           
  1708                           ;main.c: 313: T1RD16 = 1;
  1709  0003D0  8ECD               	bsf	4045,7,c	;volatile
  1710                           
  1711                           ;main.c: 314: TMR1CS = 0;
  1712  0003D2  92CD               	bcf	4045,1,c	;volatile
  1713                           
  1714                           ;main.c: 315: T1CKPS0 = 0;
  1715  0003D4  98CD               	bcf	4045,4,c	;volatile
  1716                           
  1717                           ;main.c: 316: T1CKPS1 = 0;
  1718  0003D6  9ACD               	bcf	4045,5,c	;volatile
  1719                           
  1720                           ;main.c: 317: TMR1ON = 0;
  1721  0003D8  90CD               	bcf	4045,0,c	;volatile
  1722                           
  1723                           ;main.c: 320: PIE3 = 0;
  1724  0003DA  0E00               	movlw	0
  1725  0003DC  6EA3               	movwf	4003,c	;volatile
  1726                           
  1727                           ;main.c: 321: FLTCONFIG = 0;
  1728  0003DE  0E00               	movlw	0
  1729  0003E0  6E8B               	movwf	3979,c	;volatile
  1730                           
  1731                           ;main.c: 322: PTCON0 = 0;
  1732  0003E2  0E00               	movlw	0
  1733  0003E4  6E9A               	movwf	3994,c	;volatile
  1734                           
  1735                           ;main.c: 323: PTCKPS0 = 1;
  1736  0003E6  849A               	bsf	3994,2,c	;volatile
  1737                           
  1738                           ;main.c: 324: PTCKPS1 = 1;
  1739  0003E8  869A               	bsf	3994,3,c	;volatile
  1740                           
  1741                           ;main.c: 325: PTMOD1 = 0;
  1742  0003EA  929A               	bcf	3994,1,c	;volatile
  1743                           
  1744                           ;main.c: 326: PTMOD0 = 1;
  1745  0003EC  809A               	bsf	3994,0,c	;volatile
  1746                           
  1747                           ;main.c: 328: PTCON1 = 0;
  1748  0003EE  0E00               	movlw	0
  1749  0003F0  6E99               	movwf	3993,c	;volatile
  1750                           
  1751                           ;main.c: 329: PTEN = 0;
  1752  0003F2  9E99               	bcf	3993,7,c	;volatile
  1753                           
  1754                           ;main.c: 332: PWMCON0 = 0;
  1755  0003F4  0E00               	movlw	0
  1756  0003F6  6E86               	movwf	3974,c	;volatile
  1757                           
  1758                           ;main.c: 333: PWMEN0 = 0;
  1759  0003F8  9886               	bcf	3974,4,c	;volatile
  1760                           
  1761                           ;main.c: 334: PWMEN1 = 0;
  1762  0003FA  9A86               	bcf	3974,5,c	;volatile
  1763                           
  1764                           ;main.c: 335: PWMEN2 = 1;
  1765  0003FC  8C86               	bsf	3974,6,c	;volatile
  1766                           
  1767                           ;main.c: 336: PMOD0 = 1;
  1768  0003FE  8086               	bsf	3974,0,c	;volatile
  1769                           
  1770                           ;main.c: 337: PMOD1 = 1;
  1771  000400  8286               	bsf	3974,1,c	;volatile
  1772                           
  1773                           ;main.c: 338: PMOD2 = 1;
  1774  000402  8486               	bsf	3974,2,c	;volatile
  1775                           
  1776                           ;main.c: 340: PWMCON1 = 0;
  1777  000404  0E00               	movlw	0
  1778  000406  6E85               	movwf	3973,c	;volatile
  1779                           
  1780                           ;main.c: 342: PTPERH = 0;
  1781  000408  0E00               	movlw	0
  1782  00040A  6E95               	movwf	3989,c	;volatile
  1783                           
  1784                           ;main.c: 343: PTPERL = 170;
  1785  00040C  0EAA               	movlw	170
  1786  00040E  6E96               	movwf	3990,c	;volatile
  1787                           
  1788                           ;main.c: 347: OVDCOND = 0b00101010;
  1789  000410  0E2A               	movlw	42
  1790  000412  6E83               	movwf	3971,c	;volatile
  1791                           
  1792                           ;main.c: 348: OVDCONS = 0b00000000;
  1793  000414  0E00               	movlw	0
  1794  000416  6E82               	movwf	3970,c	;volatile
  1795                           
  1796                           ;main.c: 350: BRGH = 1;
  1797  000418  84AC               	bsf	4012,2,c	;volatile
  1798                           
  1799                           ;main.c: 351: SPBRG = 19;
  1800  00041A  0E13               	movlw	19
  1801  00041C  6EAF               	movwf	4015,c	;volatile
  1802                           
  1803                           ;main.c: 353: SYNC = 0;
  1804  00041E  98AC               	bcf	4012,4,c	;volatile
  1805                           
  1806                           ;main.c: 354: SPEN = 1;
  1807  000420  8EAB               	bsf	4011,7,c	;volatile
  1808                           
  1809                           ;main.c: 355: CREN = 1;
  1810  000422  88AB               	bsf	4011,4,c	;volatile
  1811                           
  1812                           ;main.c: 356: SREN = 0;
  1813  000424  9AAB               	bcf	4011,5,c	;volatile
  1814                           
  1815                           ;main.c: 357: TXIE = 0;
  1816  000426  989D               	bcf	3997,4,c	;volatile
  1817                           
  1818                           ;main.c: 358: RCIE = 1;
  1819  000428  8A9D               	bsf	3997,5,c	;volatile
  1820                           
  1821                           ;main.c: 359: TX9 = 0;
  1822  00042A  9CAC               	bcf	4012,6,c	;volatile
  1823                           
  1824                           ;main.c: 360: RX9 = 0;
  1825  00042C  9CAB               	bcf	4011,6,c	;volatile
  1826                           
  1827                           ;main.c: 361: TXEN = 1;
  1828  00042E  8AAC               	bsf	4012,5,c	;volatile
  1829                           
  1830                           ;main.c: 362: TXIE = 0;
  1831  000430  989D               	bcf	3997,4,c	;volatile
  1832                           
  1833                           ;main.c: 363: RCIE = 0;
  1834  000432  9A9D               	bcf	3997,5,c	;volatile
  1835                           
  1836                           ;main.c: 364: PEIE = 1;
  1837  000434  8CF2               	bsf	intcon,6,c	;volatile
  1838                           
  1839                           ;main.c: 365: TMR1IE = 0;
  1840  000436  909D               	bcf	3997,0,c	;volatile
  1841                           
  1842                           ;main.c: 366: TMR0IE = 0;
  1843  000438  9AF2               	bcf	intcon,5,c	;volatile
  1844                           
  1845                           ;main.c: 367: GIE = 1;
  1846  00043A  8EF2               	bsf	intcon,7,c	;volatile
  1847  00043C  0012               	return	
  1848  00043E                     __end_of_initializePorts:
  1849                           	opt stack 0
  1850                           tblptru	equ	0xFF8
  1851                           tblptrh	equ	0xFF7
  1852                           tblptrl	equ	0xFF6
  1853                           tablat	equ	0xFF5
  1854                           prodh	equ	0xFF4
  1855                           prodl	equ	0xFF3
  1856                           intcon	equ	0xFF2
  1857                           intcon2	equ	0xFF1
  1858                           postinc0	equ	0xFEE
  1859                           wreg	equ	0xFE8
  1860                           postdec1	equ	0xFE5
  1861                           fsr1l	equ	0xFE1
  1862                           postinc2	equ	0xFDE
  1863                           postdec2	equ	0xFDD
  1864                           fsr2h	equ	0xFDA
  1865                           fsr2l	equ	0xFD9
  1866                           status	equ	0xFD8
  1867                           
  1868 ;; *************** function _convertDutyCycle *****************
  1869 ;; Defined at:
  1870 ;;		line 271 in file "../main.c"
  1871 ;; Parameters:    Size  Location     Type
  1872 ;;  servoPositio    1    wreg     unsigned char 
  1873 ;; Auto vars:     Size  Location     Type
  1874 ;;  servoPositio    1   18[COMRAM] unsigned char 
  1875 ;;  temp            2   19[COMRAM] unsigned int 
  1876 ;; Return value:  Size  Location     Type
  1877 ;;                  2   16[COMRAM] unsigned int 
  1878 ;; Registers used:
  1879 ;;		wreg, status,2, status,0
  1880 ;; Tracked objects:
  1881 ;;		On entry : 0/0
  1882 ;;		On exit  : 0/0
  1883 ;;		Unchanged: 0/0
  1884 ;; Data sizes:     COMRAM   BANK0
  1885 ;;      Params:         2       0
  1886 ;;      Locals:         3       0
  1887 ;;      Temps:          0       0
  1888 ;;      Totals:         5       0
  1889 ;;Total ram usage:        5 bytes
  1890 ;; Hardware stack levels used:    1
  1891 ;; Hardware stack levels required when called:    1
  1892 ;; This function calls:
  1893 ;;		Nothing
  1894 ;; This function is called by:
  1895 ;;		_main
  1896 ;; This function uses a non-reentrant model
  1897 ;;
  1898                           
  1899                           	psect	text6
  1900  000558                     __ptext6:
  1901                           	opt stack 0
  1902  000558                     _convertDutyCycle:
  1903                           	opt stack 29
  1904                           
  1905                           ;incstack = 0
  1906                           ;convertDutyCycle@servoPosition stored from wreg
  1907  000558  6E13               	movwf	convertDutyCycle@servoPosition,c
  1908                           
  1909                           ;main.c: 272: unsigned int temp;
  1910                           ;main.c: 274: temp = servoPosition;
  1911  00055A  C013  F014         	movff	convertDutyCycle@servoPosition,convertDutyCycle@temp
  1912  00055E  6A15               	clrf	convertDutyCycle@temp+1,c
  1913                           
  1914                           ;main.c: 275: temp = temp * 2;
  1915  000560  90D8               	bcf	status,0,c
  1916  000562  3414               	rlcf	convertDutyCycle@temp,w,c
  1917  000564  6E14               	movwf	convertDutyCycle@temp,c
  1918  000566  3415               	rlcf	convertDutyCycle@temp+1,w,c
  1919  000568  6E15               	movwf	convertDutyCycle@temp+1,c
  1920                           
  1921                           ;main.c: 276: temp = temp + 178;
  1922  00056A  0EB2               	movlw	178
  1923  00056C  2414               	addwf	convertDutyCycle@temp,w,c
  1924  00056E  6E14               	movwf	convertDutyCycle@temp,c
  1925  000570  0E00               	movlw	0
  1926  000572  2015               	addwfc	convertDutyCycle@temp+1,w,c
  1927  000574  6E15               	movwf	convertDutyCycle@temp+1,c
  1928                           
  1929                           ;main.c: 277: return (temp);
  1930  000576  C014  F011         	movff	convertDutyCycle@temp,?_convertDutyCycle
  1931  00057A  C015  F012         	movff	convertDutyCycle@temp+1,?_convertDutyCycle+1
  1932  00057E  0012               	return	
  1933  000580                     __end_of_convertDutyCycle:
  1934                           	opt stack 0
  1935                           tblptru	equ	0xFF8
  1936                           tblptrh	equ	0xFF7
  1937                           tblptrl	equ	0xFF6
  1938                           tablat	equ	0xFF5
  1939                           prodh	equ	0xFF4
  1940                           prodl	equ	0xFF3
  1941                           intcon	equ	0xFF2
  1942                           intcon2	equ	0xFF1
  1943                           postinc0	equ	0xFEE
  1944                           wreg	equ	0xFE8
  1945                           postdec1	equ	0xFE5
  1946                           fsr1l	equ	0xFE1
  1947                           postinc2	equ	0xFDE
  1948                           postdec2	equ	0xFDD
  1949                           fsr2h	equ	0xFDA
  1950                           fsr2l	equ	0xFD9
  1951                           status	equ	0xFD8
  1952                           
  1953 ;; *************** function _DelayMs *****************
  1954 ;; Defined at:
  1955 ;;		line 17 in file "../DELAY16.c"
  1956 ;; Parameters:    Size  Location     Type
  1957 ;;  i               2   16[COMRAM] unsigned int 
  1958 ;; Auto vars:     Size  Location     Type
  1959 ;;  j               2   18[COMRAM] int 
  1960 ;;  k               1   20[COMRAM] unsigned char 
  1961 ;; Return value:  Size  Location     Type
  1962 ;;		None               void
  1963 ;; Registers used:
  1964 ;;		wreg, status,2, status,0
  1965 ;; Tracked objects:
  1966 ;;		On entry : 0/0
  1967 ;;		On exit  : 0/0
  1968 ;;		Unchanged: 0/0
  1969 ;; Data sizes:     COMRAM   BANK0
  1970 ;;      Params:         2       0
  1971 ;;      Locals:         3       0
  1972 ;;      Temps:          0       0
  1973 ;;      Totals:         5       0
  1974 ;;Total ram usage:        5 bytes
  1975 ;; Hardware stack levels used:    1
  1976 ;; Hardware stack levels required when called:    1
  1977 ;; This function calls:
  1978 ;;		Nothing
  1979 ;; This function is called by:
  1980 ;;		_main
  1981 ;; This function uses a non-reentrant model
  1982 ;;
  1983                           
  1984                           	psect	text7
  1985  000490                     __ptext7:
  1986                           	opt stack 0
  1987  000490                     _DelayMs:
  1988                           	opt stack 29
  1989                           
  1990                           ;DELAY16.c: 19: int j;
  1991                           ;DELAY16.c: 20: unsigned char k;
  1992                           ;DELAY16.c: 22: for(j=0; j<i; j++)
  1993                           
  1994                           ;incstack = 0
  1995  000490  0E00               	movlw	0
  1996  000492  6E14               	movwf	DelayMs@j+1,c
  1997  000494  0E00               	movlw	0
  1998  000496  6E13               	movwf	DelayMs@j,c
  1999  000498  D016               	goto	l963
  2000  00049A                     l4:
  2001                           
  2002                           ;DELAY16.c: 23: {
  2003                           ;DELAY16.c: 24: k=255;
  2004  00049A  6815               	setf	DelayMs@k,c
  2005  00049C                     l953:
  2006  00049C  0615               	decf	DelayMs@k,f,c
  2007  00049E  2815               	incf	DelayMs@k& (0+255),w,c
  2008  0004A0  A4D8               	btfss	status,2,c
  2009  0004A2  D7FC               	goto	l953
  2010                           
  2011                           ;DELAY16.c: 26: k=255;
  2012  0004A4  6815               	setf	DelayMs@k,c
  2013  0004A6                     l955:
  2014  0004A6  0615               	decf	DelayMs@k,f,c
  2015  0004A8  2815               	incf	DelayMs@k& (0+255),w,c
  2016  0004AA  A4D8               	btfss	status,2,c
  2017  0004AC  D7FC               	goto	l955
  2018                           
  2019                           ;DELAY16.c: 28: k=255;
  2020  0004AE  6815               	setf	DelayMs@k,c
  2021  0004B0                     l957:
  2022  0004B0  0615               	decf	DelayMs@k,f,c
  2023  0004B2  2815               	incf	DelayMs@k& (0+255),w,c
  2024  0004B4  A4D8               	btfss	status,2,c
  2025  0004B6  D7FC               	goto	l957
  2026                           
  2027                           ;DELAY16.c: 30: k=255;
  2028  0004B8  6815               	setf	DelayMs@k,c
  2029  0004BA                     l959:
  2030  0004BA  0615               	decf	DelayMs@k,f,c
  2031  0004BC  2815               	incf	DelayMs@k& (0+255),w,c
  2032  0004BE  A4D8               	btfss	status,2,c
  2033  0004C0  D7FC               	goto	l959
  2034  0004C2  4A13               	infsnz	DelayMs@j,f,c
  2035  0004C4  2A14               	incf	DelayMs@j+1,f,c
  2036  0004C6                     l963:
  2037  0004C6  5011               	movf	DelayMs@i,w,c
  2038  0004C8  5C13               	subwf	DelayMs@j,w,c
  2039  0004CA  5012               	movf	DelayMs@i+1,w,c
  2040  0004CC  5814               	subwfb	DelayMs@j+1,w,c
  2041  0004CE  B0D8               	btfsc	status,0,c
  2042  0004D0  0012               	return	
  2043  0004D2  D7E3               	goto	l4
  2044  0004D4                     __end_of_DelayMs:
  2045                           	opt stack 0
  2046                           tblptru	equ	0xFF8
  2047                           tblptrh	equ	0xFF7
  2048                           tblptrl	equ	0xFF6
  2049                           tablat	equ	0xFF5
  2050                           prodh	equ	0xFF4
  2051                           prodl	equ	0xFF3
  2052                           intcon	equ	0xFF2
  2053                           intcon2	equ	0xFF1
  2054                           postinc0	equ	0xFEE
  2055                           wreg	equ	0xFE8
  2056                           postdec1	equ	0xFE5
  2057                           fsr1l	equ	0xFE1
  2058                           postinc2	equ	0xFDE
  2059                           postdec2	equ	0xFDD
  2060                           fsr2h	equ	0xFDA
  2061                           fsr2l	equ	0xFD9
  2062                           status	equ	0xFD8
  2063                           
  2064 ;; *************** function _ADsetChannel *****************
  2065 ;; Defined at:
  2066 ;;		line 381 in file "../main.c"
  2067 ;; Parameters:    Size  Location     Type
  2068 ;;  channel         1    wreg     unsigned char 
  2069 ;; Auto vars:     Size  Location     Type
  2070 ;;  channel         1   17[COMRAM] unsigned char 
  2071 ;; Return value:  Size  Location     Type
  2072 ;;		None               void
  2073 ;; Registers used:
  2074 ;;		wreg, status,2, status,0
  2075 ;; Tracked objects:
  2076 ;;		On entry : 0/0
  2077 ;;		On exit  : 0/0
  2078 ;;		Unchanged: 0/0
  2079 ;; Data sizes:     COMRAM   BANK0
  2080 ;;      Params:         0       0
  2081 ;;      Locals:         1       0
  2082 ;;      Temps:          1       0
  2083 ;;      Totals:         2       0
  2084 ;;Total ram usage:        2 bytes
  2085 ;; Hardware stack levels used:    1
  2086 ;; Hardware stack levels required when called:    1
  2087 ;; This function calls:
  2088 ;;		Nothing
  2089 ;; This function is called by:
  2090 ;;		_main
  2091 ;; This function uses a non-reentrant model
  2092 ;;
  2093                           
  2094                           	psect	text8
  2095  000580                     __ptext8:
  2096                           	opt stack 0
  2097  000580                     _ADsetChannel:
  2098                           	opt stack 29
  2099                           
  2100                           ;incstack = 0
  2101                           ;ADsetChannel@channel stored from wreg
  2102  000580  6E12               	movwf	ADsetChannel@channel,c
  2103                           
  2104                           ;main.c: 382: ADCON0 = (channel << 2) + 0x01;
  2105  000582  C012  F011         	movff	ADsetChannel@channel,??_ADsetChannel
  2106  000586  90D8               	bcf	status,0,c
  2107  000588  3611               	rlcf	??_ADsetChannel,f,c
  2108  00058A  90D8               	bcf	status,0,c
  2109  00058C  3611               	rlcf	??_ADsetChannel,f,c
  2110  00058E  2811               	incf	??_ADsetChannel,w,c
  2111  000590  6EC2               	movwf	4034,c	;volatile
  2112  000592  0012               	return	
  2113  000594                     __end_of_ADsetChannel:
  2114                           	opt stack 0
  2115                           tblptru	equ	0xFF8
  2116                           tblptrh	equ	0xFF7
  2117                           tblptrl	equ	0xFF6
  2118                           tablat	equ	0xFF5
  2119                           prodh	equ	0xFF4
  2120                           prodl	equ	0xFF3
  2121                           intcon	equ	0xFF2
  2122                           intcon2	equ	0xFF1
  2123                           postinc0	equ	0xFEE
  2124                           wreg	equ	0xFE8
  2125                           postdec1	equ	0xFE5
  2126                           fsr1l	equ	0xFE1
  2127                           postinc2	equ	0xFDE
  2128                           postdec2	equ	0xFDD
  2129                           fsr2h	equ	0xFDA
  2130                           fsr2l	equ	0xFD9
  2131                           status	equ	0xFD8
  2132                           
  2133 ;; *************** function _isr *****************
  2134 ;; Defined at:
  2135 ;;		line 395 in file "../main.c"
  2136 ;; Parameters:    Size  Location     Type
  2137 ;;		None
  2138 ;; Auto vars:     Size  Location     Type
  2139 ;;  ch              1   15[COMRAM] unsigned char 
  2140 ;;  BoardID         1   14[COMRAM] unsigned char 
  2141 ;;  firstServo      1    0        unsigned char 
  2142 ;;  k               1    0        unsigned char 
  2143 ;;  j               1    0        unsigned char 
  2144 ;;  i               1    0        unsigned char 
  2145 ;; Return value:  Size  Location     Type
  2146 ;;		None               void
  2147 ;; Registers used:
  2148 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2149 ;; Tracked objects:
  2150 ;;		On entry : 0/0
  2151 ;;		On exit  : 0/0
  2152 ;;		Unchanged: 0/0
  2153 ;; Data sizes:     COMRAM   BANK0
  2154 ;;      Params:         0       0
  2155 ;;      Locals:         2       0
  2156 ;;      Temps:         14       0
  2157 ;;      Totals:        16       0
  2158 ;;Total ram usage:       16 bytes
  2159 ;; Hardware stack levels used:    1
  2160 ;; This function calls:
  2161 ;;		Nothing
  2162 ;; This function is called by:
  2163 ;;		Interrupt level 2
  2164 ;; This function uses a non-reentrant model
  2165 ;;
  2166                           
  2167                           	psect	intcode
  2168  000008                     __pintcode:
  2169                           	opt stack 0
  2170  000008                     _isr:
  2171                           	opt stack 28
  2172                           
  2173                           ;incstack = 0
  2174  000008  CFFA F001          	movff	pclath,??_isr
  2175  00000C  CFFB F002          	movff	pclatu,??_isr+1
  2176  000010  CFE9 F003          	movff	fsr0l,??_isr+2
  2177  000014  CFEA F004          	movff	fsr0h,??_isr+3
  2178  000018  CFE1 F005          	movff	fsr1l,??_isr+4
  2179  00001C  CFE2 F006          	movff	fsr1h,??_isr+5
  2180  000020  CFD9 F007          	movff	fsr2l,??_isr+6
  2181  000024  CFDA F008          	movff	fsr2h,??_isr+7
  2182  000028  CFF3 F009          	movff	prodl,??_isr+8
  2183  00002C  CFF4 F00A          	movff	prodh,??_isr+9
  2184  000030  CFF6 F00B          	movff	tblptrl,??_isr+10
  2185  000034  CFF7 F00C          	movff	tblptrh,??_isr+11
  2186  000038  CFF8 F00D          	movff	tblptru,??_isr+12
  2187  00003C  CFF5 F00E          	movff	tablat,??_isr+13
  2188                           
  2189                           ;main.c: 396: unsigned char BoardID, ch;
  2190                           ;main.c: 397: static unsigned char buffIndex = 0;
  2191                           ;main.c: 398: static unsigned char escapeFlag = 0;
  2192                           ;main.c: 399: unsigned char i, j, k, firstServo;
  2193                           ;main.c: 401: if (RCIF == 1) {
  2194  000040  AA9E               	btfss	3998,5,c	;volatile
  2195  000042  D03E               	goto	i2l284
  2196                           
  2197                           ;main.c: 402: RCIF = 0;
  2198  000044  9A9E               	bcf	3998,5,c	;volatile
  2199                           
  2200                           ;main.c: 404: if (RCSTAbits.OERR) {
  2201  000046  A2AB               	btfss	4011,1,c	;volatile
  2202  000048  D002               	goto	i2l274
  2203                           
  2204                           ;main.c: 405: RCSTAbits.CREN = 0;
  2205  00004A  98AB               	bcf	4011,4,c	;volatile
  2206                           
  2207                           ;main.c: 406: RCSTAbits.CREN = 1;
  2208  00004C  88AB               	bsf	4011,4,c	;volatile
  2209  00004E                     i2l274:
  2210                           
  2211                           ;main.c: 407: }
  2212                           ;main.c: 409: if (RCSTAbits.FERR)
  2213  00004E  B4AB               	btfsc	4011,2,c	;volatile
  2214                           
  2215                           ;main.c: 410: ch = RCREG;
  2216  000050  CFAE F010          	movff	4014,isr@ch	;volatile
  2217                           
  2218                           ;main.c: 411: ch = RCREG;
  2219  000054  CFAE F010          	movff	4014,isr@ch	;volatile
  2220                           
  2221                           ;main.c: 413: if (ch == '/' && !escapeFlag)
  2222  000058  5010               	movf	isr@ch,w,c
  2223  00005A  0A2F               	xorlw	47
  2224  00005C  A4D8               	btfss	status,2,c
  2225  00005E  D005               	goto	i2l1553
  2226  000060  6647               	tstfsz	isr@escapeFlag,c
  2227  000062  D003               	goto	i2l1553
  2228                           
  2229                           ;main.c: 414: escapeFlag = !0;
  2230  000064  0E01               	movlw	1
  2231  000066  6E47               	movwf	isr@escapeFlag,c
  2232  000068  D02B               	goto	i2l284
  2233  00006A                     i2l1553:
  2234                           
  2235                           ;main.c: 415: else if (ch == '>' && !escapeFlag)
  2236  00006A  5010               	movf	isr@ch,w,c
  2237  00006C  0A3E               	xorlw	62
  2238  00006E  A4D8               	btfss	status,2,c
  2239  000070  D003               	goto	i2l1559
  2240  000072  6647               	tstfsz	isr@escapeFlag,c
  2241  000074  D001               	goto	i2l1559
  2242  000076  D00E               	goto	i2l1569
  2243  000078                     i2l1559:
  2244                           
  2245                           ;main.c: 417: else if (ch == '\r' && !escapeFlag) {
  2246  000078  5010               	movf	isr@ch,w,c
  2247  00007A  0A0D               	xorlw	13
  2248  00007C  A4D8               	btfss	status,2,c
  2249  00007E  D00D               	goto	i2l1571
  2250  000080  6647               	tstfsz	isr@escapeFlag,c
  2251  000082  D00B               	goto	i2l1571
  2252                           
  2253                           ;main.c: 418: BoardID = XBEERxBuffer[0];
  2254  000084  C080  F00F         	movff	_XBEERxBuffer,isr@BoardID
  2255                           
  2256                           ;main.c: 419: if (BoardID == 1)
  2257  000088  040F               	decf	isr@BoardID,w,c
  2258  00008A  A4D8               	btfss	status,2,c
  2259  00008C  D003               	goto	i2l1569
  2260                           
  2261                           ;main.c: 420: inLength = buffIndex;
  2262  00008E  C046  F03B         	movff	isr@buffIndex,_inLength
  2263  000092  6A3C               	clrf	_inLength+1,c
  2264  000094                     i2l1569:
  2265                           
  2266                           ;main.c: 421: buffIndex = 0;
  2267  000094  0E00               	movlw	0
  2268  000096  6E46               	movwf	isr@buffIndex,c
  2269                           
  2270                           ;main.c: 422: } else {
  2271  000098  D013               	goto	i2l284
  2272  00009A                     i2l1571:
  2273                           
  2274                           ;main.c: 423: escapeFlag = 0;
  2275  00009A  0E00               	movlw	0
  2276  00009C  6E47               	movwf	isr@escapeFlag,c
  2277                           
  2278                           ;main.c: 424: if (buffIndex < 64) XBEERxBuffer[buffIndex++] = ch;
  2279  00009E  0E40               	movlw	64
  2280  0000A0  5C46               	subwf	isr@buffIndex,w,c
  2281  0000A2  B0D8               	btfsc	status,0,c
  2282  0000A4  D00D               	goto	i2l284
  2283  0000A6  5046               	movf	isr@buffIndex,w,c
  2284  0000A8  0D01               	mullw	1
  2285  0000AA  0100               	movlb	0	; () banked
  2286  0000AC  0E80               	movlw	low _XBEERxBuffer
  2287  0000AE  24F3               	addwf	prodl,w,c
  2288  0000B0  6ED9               	movwf	fsr2l,c
  2289  0000B2  0100               	movlb	0	; () banked
  2290  0000B4  0E00               	movlw	high _XBEERxBuffer
  2291  0000B6  20F4               	addwfc	prodh,w,c
  2292  0000B8  6EDA               	movwf	fsr2h,c
  2293  0000BA  C010  FFDF         	movff	isr@ch,indf2
  2294                           
  2295                           ; BSR set to: 0
  2296  0000BE  2A46               	incf	isr@buffIndex,f,c
  2297  0000C0                     i2l284:
  2298  0000C0  C00E  FFF5         	movff	??_isr+13,tablat
  2299  0000C4  C00D  FFF8         	movff	??_isr+12,tblptru
  2300  0000C8  C00C  FFF7         	movff	??_isr+11,tblptrh
  2301  0000CC  C00B  FFF6         	movff	??_isr+10,tblptrl
  2302  0000D0  C00A  FFF4         	movff	??_isr+9,prodh
  2303  0000D4  C009  FFF3         	movff	??_isr+8,prodl
  2304  0000D8  C008  FFDA         	movff	??_isr+7,fsr2h
  2305  0000DC  C007  FFD9         	movff	??_isr+6,fsr2l
  2306  0000E0  C006  FFE2         	movff	??_isr+5,fsr1h
  2307  0000E4  C005  FFE1         	movff	??_isr+4,fsr1l
  2308  0000E8  C004  FFEA         	movff	??_isr+3,fsr0h
  2309  0000EC  C003  FFE9         	movff	??_isr+2,fsr0l
  2310  0000F0  C002  FFFB         	movff	??_isr+1,pclatu
  2311  0000F4  C001  FFFA         	movff	??_isr,pclath
  2312  0000F8  0011               	retfie		f
  2313  0000FA                     __end_of_isr:
  2314                           	opt stack 0
  2315                           pclatu	equ	0xFFB
  2316                           pclath	equ	0xFFA
  2317                           tblptru	equ	0xFF8
  2318                           tblptrh	equ	0xFF7
  2319                           tblptrl	equ	0xFF6
  2320                           tablat	equ	0xFF5
  2321                           prodh	equ	0xFF4
  2322                           prodl	equ	0xFF3
  2323                           intcon	equ	0xFF2
  2324                           intcon2	equ	0xFF1
  2325                           postinc0	equ	0xFEE
  2326                           fsr0h	equ	0xFEA
  2327                           fsr0l	equ	0xFE9
  2328                           wreg	equ	0xFE8
  2329                           postdec1	equ	0xFE5
  2330                           fsr1h	equ	0xFE2
  2331                           fsr1l	equ	0xFE1
  2332                           indf2	equ	0xFDF
  2333                           postinc2	equ	0xFDE
  2334                           postdec2	equ	0xFDD
  2335                           fsr2h	equ	0xFDA
  2336                           fsr2l	equ	0xFD9
  2337                           status	equ	0xFD8
  2338                           pclatu	equ	0xFFB
  2339                           pclath	equ	0xFFA
  2340                           tblptru	equ	0xFF8
  2341                           tblptrh	equ	0xFF7
  2342                           tblptrl	equ	0xFF6
  2343                           tablat	equ	0xFF5
  2344                           prodh	equ	0xFF4
  2345                           prodl	equ	0xFF3
  2346                           intcon	equ	0xFF2
  2347                           intcon2	equ	0xFF1
  2348                           postinc0	equ	0xFEE
  2349                           fsr0h	equ	0xFEA
  2350                           fsr0l	equ	0xFE9
  2351                           wreg	equ	0xFE8
  2352                           postdec1	equ	0xFE5
  2353                           fsr1h	equ	0xFE2
  2354                           fsr1l	equ	0xFE1
  2355                           indf2	equ	0xFDF
  2356                           postinc2	equ	0xFDE
  2357                           postdec2	equ	0xFDD
  2358                           fsr2h	equ	0xFDA
  2359                           fsr2l	equ	0xFD9
  2360                           status	equ	0xFD8
  2361                           
  2362                           	psect	rparam
  2363  0000                     pclatu	equ	0xFFB
  2364                           pclath	equ	0xFFA
  2365                           tblptru	equ	0xFF8
  2366                           tblptrh	equ	0xFF7
  2367                           tblptrl	equ	0xFF6
  2368                           tablat	equ	0xFF5
  2369                           prodh	equ	0xFF4
  2370                           prodl	equ	0xFF3
  2371                           intcon	equ	0xFF2
  2372                           intcon2	equ	0xFF1
  2373                           postinc0	equ	0xFEE
  2374                           fsr0h	equ	0xFEA
  2375                           fsr0l	equ	0xFE9
  2376                           wreg	equ	0xFE8
  2377                           postdec1	equ	0xFE5
  2378                           fsr1h	equ	0xFE2
  2379                           fsr1l	equ	0xFE1
  2380                           indf2	equ	0xFDF
  2381                           postinc2	equ	0xFDE
  2382                           postdec2	equ	0xFDD
  2383                           fsr2h	equ	0xFDA
  2384                           fsr2l	equ	0xFD9
  2385                           status	equ	0xFD8


Data Sizes:
    Strings     44
    Constant    522
    Data        13
    BSS         151
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     50      87
    BANK0           128      0     128

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 24
		 -> STR_2(CODE[24]), STR_1(CODE[20]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    S438$_cp	PTR const unsigned char  size(2) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(2) Largest target is 0


Critical Paths under _main in COMRAM

    _main->_printf
    _printf->___lwmod
    ___lwmod->___lwdiv

Critical Paths under _isr in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0    1375
                                             44 COMRAM     6     6      0
                       _ADsetChannel
                            _DelayMs
                   _convertDutyCycle
                    _initializePorts
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              16    12      4    1047
                                             28 COMRAM    16    12      4
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      22
                                             16 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     265
                                             23 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     268
                                             16 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _initializePorts                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _convertDutyCycle                                     5     3      2      60
                                             16 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _DelayMs                                              5     3      2     133
                                             16 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _ADsetChannel                                         2     2      0      15
                                             16 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _isr                                                 20    20      0     113
                                              0 COMRAM    16    16      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADsetChannel
   _DelayMs
   _convertDutyCycle
   _initializePorts
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     _putch

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              FF      0       0       6        0.0%
EEDATA              80      0       0       0        0.0%
BITBANK0            80      0       0       3        0.0%
BANK0               80      0      80       4      100.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     32      57       1       68.5%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      D7       5        0.0%
DATA                 0      0      D7       7        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Mon Aug 15 12:31:04 2016

                            l4 049A                              _j 003D                             _ch 0040  
                  __CFG_BORV$3 000000                   __CFG_CP0$OFF 000000                   __CFG_CP1$OFF 000000  
                  __CFG_OSC$HS 000000                            l254 05A4                            l840 0486  
                          l850 054E                            l953 049C                            l955 04A6  
                          l963 04C6                            l957 04B0                            l959 04BA  
                          _GIE 007F97                   __CFG_CPB$OFF 000000                   __CFG_CPD$OFF 000000  
                          _PSA 007EAB                            _RX9 007D5E                            _TX9 007D66  
                 __CFG_BOR$OFF 000000                            _isr 0008                            prod 000FF3  
                          wreg 000FE8                   __CFG_WDT$OFF 000000                           l1401 031C  
                         l1331 045C                           l1403 0322                           l1341 047C  
                         l1333 0460                           l1351 052C                           l1407 036A  
                         l1329 0454                           l1353 0530                           l1409 0372  
                         l1363 0260                           l1357 0544                           l1349 0524  
                         l1373 029A                           l1517 021E                           l1383 02D2  
                         l1367 0270                           l1473 016A                           l1481 017C  
                         l1457 013C                           l1475 016E                           l1397 030A  
                         l1479 0178                           ?_isr 0001                           STR_1 1FEB  
                         STR_2 1FD3                           _BRGH 007D62                           _CREN 007D5C  
                         _T0CS 007EAD                           _T0SE 007EAC                           _PIE1 000F9D  
                         _PIE3 000FA3                           _PEIE 007F96                           _RCIE 007CED  
                         _RCIF 007CF5                           _RBPU 007F8F                           _PTEN 007CCF  
                         _SPEN 007D5F                           _SREN 007D5D                           _TXIE 007CEC  
                         _TXIF 007CF4                           _TXEN 007D65                           _SYNC 007D64  
            __CFG_T1OSCMX$HIGH 000000                           _main 00FE                           fsr0h 000FEA  
                         fsr1h 000FE2                           fsr0l 000FE9                           fsr2h 000FDA  
                         fsr1l 000FE1                           indf2 000FDF                           fsr2l 000FD9  
                         pclat 000FFA                           prodh 000FF4                           prodl 000FF3  
                         start 00FA                  __CFG_IESO$OFF 000000                __end_of_DelayMs 04D4  
                __CFG_MCLRE$ON 000000                          ??_isr 0001                          ?_main 0001  
                        _T0CON 000FD5                          _T1CON 000FCD                          _PDC0H 000F90  
                        _T0PS0 007EA8                          _PDC1H 000F8E                          _T0PS1 007EA9  
                        _T0PS2 007EAA                          _PDC2H 000F8C                          _PDC0L 000F91  
                        _PDC1L 000F8F                          _PDC2L 000F8D                __end_of___lwdiv 0490  
              __end_of___lwmod 0558                          i2l274 004E                          i2l284 00C0  
                        _RCREG 000FAE                          _PMOD0 007C30                          _PMOD1 007C31  
                        _PMOD2 007C32                          _SPBRG 000FAF                          _TRISA 000F92  
                        _TRISB 000F93                          _TXREG 000FAD                  __CFG_PWRT$OFF 000000  
                __CFG_WRT0$OFF 000000                  __CFG_WRT1$OFF 000000              ??_initializePorts 0011  
               __CFG_EBTR0$OFF 000000                 __CFG_FCMEN$OFF 000000                 __CFG_EBTR1$OFF 000000  
            ?_convertDutyCycle 0011                  __CFG_WRTB$OFF 000000                  __CFG_WRTC$OFF 000000  
                __CFG_WRTD$OFF 000000                 __CFG_EBTRB$OFF 000000                __end_of_dpowers 1FD3  
                        _dummy 0041             ??_convertDutyCycle 0013                   main@potValue 002D  
                        _putch 05A2                          isr@ch 0010                          tablat 000FF5  
                        status 000FD8                __initialization 04D4                 __CFG_HPOL$HIGH 000000  
                 __end_of_main 0256                  ?_ADsetChannel 0001                 __CFG_LPOL$HIGH 000000  
                       ??_main 002D                  __activetblptr 000002                         _ADCON0 000FC2  
                       _ADCON1 000FC1                         _ADCON2 000FC0                         _ADRESH 000FC4  
                       ?_putch 0001                         _T1RD16 007E6F                         _GODONE 007E11  
                       i2l1553 006A                         i2l1571 009A                         i2l1559 0078  
                       i2l1569 0094                         _INTCON 000FF2                      ??_DelayMs 0013  
                       _PTCON0 000F9A                         _PTCON1 000F99                         _TMR0IE 007F95  
                       _TMR0IF 007F92                         _TMR1IE 007CE8                         _TMR1CS 007E69  
                       _TMR0ON 007EAF                         _TMR1ON 007E68                         _PTMOD0 007CD0  
                       _PTMOD1 007CD1                         _PWMEN0 007C34                         _PWMEN1 007C35  
                       _PWMEN2 007C36                         _PTPERH 000F95                         _PTPERL 000F96  
               __CFG_PWMPIN$ON 000000                 ??_ADsetChannel 0011                 __CFG_STVREN$ON 000000  
                    ??___lwdiv 0015                      ??___lwmod 001C                         clear_0 04DA  
                       clear_1 04E6                         _printf 0256                   __pdataCOMRAM 004A  
                 __mediumconst 1DC8                         tblptrh 000FF7                         tblptrl 000FF6  
                       tblptru 000FF8                     __accesstop 0080        __end_of__initialization 050C  
              __CFG_FLTAMX$RA5 000000                 __pcstackCOMRAM 0001                  __end_of_putch 05AE  
                      ??_putch 0011              main@Timer0Counter 002F                     __pbssBANK0 0080  
                   __pnvCOMRAM 0057                _initializePorts 038A                        _T016BIT 007EAE  
                 isr@buffIndex 0046                        ?_printf 001D                        _T1CKPS0 007E6C  
                      _T1CKPS1 007E6D               __CFG_BBSIZ$BB256 000000                        _LEDflag 0057  
                      _OVDCOND 000F83                        _OVDCONS 000F82                        _PTCKPS0 007CD2  
                      _PTCKPS1 007CD3                     _escapeFlag 0043                        _PWMCON0 000F86  
                      _PWMCON1 000F85           __end_of_ADsetChannel 0594                        _DelayMs 0490  
            __end_of_crc_tab16 1FC9                        __Hparam 0000      __size_of_convertDutyCycle 0028  
                      __Lparam 0000                        ___lwdiv 043E                        ___lwmod 0516  
                      __pcinit 04D4                        _endFlag 0042                        __ramtop 0100  
                      __ptext0 00FE                        __ptext1 0256                        __ptext2 05A2  
                      __ptext3 0516                        __ptext4 043E                        __ptext5 038A  
                      __ptext6 0558                        __ptext7 0490                        __ptext8 0580  
              __size_of_printf 0134                        _convert 0039                        _dpowers 1FC9  
                    _FLTCONFIG 000F8B                   __size_of_isr 00F2                        _integer 0048  
convertDutyCycle@servoPosition 0013           end_of_initialization 050C                  __Lmediumconst 1DC8  
      __end_of_initializePorts 043E                      _RCSTAbits 000FAB                        printf@c 002C  
                      printf@f 001D                        postdec1 000FE5                        postdec2 000FDD  
                      postinc0 000FEE                        postinc2 000FDE                        putch@ch 0011  
                    _PORTAbits 000F80            ADsetChannel@channel 0012                     main@stroke 0031  
                __pidataCOMRAM 0594                     isr@BoardID 000F                 __end_of_printf 038A  
        __size_of_ADsetChannel 0014            start_initialization 04D4                    __end_of_isr 00FA  
             ?_initializePorts 0001               _convertDutyCycle 0558                   _ADsetChannel 0580  
                     ??_printf 0021                    __pbssCOMRAM 0033           convertDutyCycle@temp 0014  
          __end_of__stringdata 1FFF                       ?_DelayMs 0011               ___lwdiv@dividend 0011  
                    __pintcode 0008                  __pmediumconst 1DC8                    _boardNumber 003F  
                    _crc_tab16 1DC9                       ?___lwdiv 0011                       ?___lwmod 0018  
             ___lwdiv@quotient 0015                      _dutyCycle 004A                 __size_of_putch 000C  
                isr@escapeFlag 0047                       DelayMs@i 0011                       DelayMs@j 0013  
                     DelayMs@k 0015               __CFG_WDTPS$32768 000000                      _startFlag 0045  
                  __stringdata 1FD3                     _ADCON2bits 000FC0                     printf@_val 0027  
                   printf@flag 0025                      main@angle 0032                     printf@prec 0026  
                    copy_data0 0500               __size_of_DelayMs 0044                       __Hrparam 0000  
                 _XBEERxBuffer 0080                       __Lrparam 0000               __size_of___lwdiv 0052  
             __size_of___lwmod 0042       __end_of_convertDutyCycle 0580                ___lwdiv@divisor 0013  
              ___lwdiv@counter 0017                       _inLength 003B               _numServosUpdated 0044  
                __size_of_main 0158                     _LEDcounter 0056                       intlevel2 0000  
             ___lwmod@dividend 0018                     _DUTYbuffer 0033                       printf@ap 0023  
     __size_of_initializePorts 00B4                    _servoBuffer 00C0                ___lwmod@divisor 001A  
              ___lwmod@counter 001C  
